{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "dropzone-dialog",
  "type": "registry:component",
  "title": "Dropzone Dialog",
  "description": "An upload button component which opens up a dialog with a dropzone and uses toasts as its response method.",
  "dependencies": [
    "lucide-react@^0.435.0",
    "@paralleldrive/cuid2@^2.2.2",
    "uploadthing@^7.7.2",
    "@uploadthing/react@^7.3.1",
    "@uploadthing/shared@^7.1.8",
    "@radix-ui/react-slot",
    "class-variance-authority",
    "@radix-ui/react-dialog",
    "vaul",
    "@radix-ui/react-tooltip",
    "@uploadthing/react",
    ".",
    "@uploadthing/shared",
    "sonner",
    "zustand",
    "@paralleldrive/cuid2",
    "lucide-react"
  ],
  "registryDependencies": [
    "sonner",
    "button",
    "dialog",
    "drawer",
    "tooltip"
  ],
  "files": [
    {
      "path": "registry/new-york/dropzone-dialog/dropzone-dialog.tsx",
      "content": "\"use client\";\n\nimport { Button } from \"@/components/ui/button\";\nimport {\n  Dialog,\n  DialogContent,\n  DialogDescription,\n  DialogFooter,\n  DialogHeader,\n  DialogTitle,\n  DialogTrigger,\n} from \"@/components/ui/dialog\";\nimport {\n  Drawer,\n  DrawerContent,\n  DrawerDescription,\n  DrawerFooter,\n  DrawerHeader,\n  DrawerTitle,\n  DrawerTrigger,\n} from \"@/components/ui/drawer\";\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\";\nimport { useMediaQuery } from \"@/hooks/use-media-query\";\nimport { UploadButton, useUploadThing } from \"@/lib/uploadthing\";\nimport {\n  checkFileObjectKey,\n  getFileSizeFormatted,\n  truncateFileName,\n} from \"@/lib/uploadthingui-utils\";\nimport { cn } from \"@/lib/utils\";\nimport { useFileStorageStore, type UTUIFile } from \"@/stores/main\";\nimport { createId } from \"@paralleldrive/cuid2\";\nimport { useDropzone } from \"@uploadthing/react\";\nimport {\n  generateClientDropzoneAccept,\n  generatePermittedFileTypes,\n} from \"@uploadthing/shared\";\nimport { File, Upload, UploadCloud, X } from \"lucide-react\";\nimport {\n  cloneElement,\n  isValidElement,\n  useCallback,\n  useEffect,\n  useRef,\n  useState,\n  type ComponentProps,\n} from \"react\";\nimport { toast } from \"sonner\";\n\n// Get the props type directly from UploadButton\ntype UploadButtonProps = ComponentProps<typeof UploadButton>;\n\n/**\n * @description An upload button component which opens up a dialog with a dropzone and uses toasts as its response method.\n * @param {UploadButtonProps} props - The props for the UploadButton component.\n * @param {boolean} showDetails - Whether to show the details of the upload.\n * @param {string} instanceId - The instance ID for the upload. Required to avoid multiple instances of the same component if multiple upload buttons are used.\n * @param {boolean} allowInBetweenUploads - Whether to allow in between uploads.\n * @param {routeDetails} routeDetails - Additional details for the upload; Example: maxFileCount, minFileCount, etc.\n * @param {React.ReactNode} children - React node to render a custom button component.\n */\nexport default function DropzoneDialog({\n  props,\n  showDetails = true,\n  instanceId,\n  allowInBetweenUploads = true,\n  routeDetails,\n  children,\n}: {\n  props: UploadButtonProps;\n  showDetails?: boolean;\n  instanceId: string;\n  allowInBetweenUploads?: boolean;\n  routeDetails?: {\n    maxFileCount?: number;\n    minFileCount?: number;\n  };\n  children?: React.ReactNode;\n}) {\n  // [1]. States, Refs, Hooks, etc.\n  const { endpoint, ...restProps } = props;\n  const isDesktop = useMediaQuery(\"(min-width: 768px)\");\n\n  const [open, setOpen] = useState(false);\n\n  // Used to start the combined upload\n  const [startUpload, setStartUpload] = useState(false);\n\n  const { getFiles, addFiles, removeFiles } = useFileStorageStore();\n\n  const files = getFiles(instanceId);\n  const filesNotStarted = files.filter((file) => file.status === \"not started\");\n  const { routeConfig } = useUploadThing(endpoint, {\n    ...restProps,\n  });\n\n  const canUpload =\n    allowInBetweenUploads ||\n    files.filter((file) => file.status === \"uploading\").length === 0;\n\n  // Used to generate the accepted file types\n  const acceptedFileTypes = generatePermittedFileTypes(routeConfig)\n    .fileTypes.map((fileType) => {\n      if (fileType.includes(\"/\")) {\n        return fileType;\n      } else {\n        return `${fileType}/*`;\n      }\n    })\n    .join(\",\");\n\n  // Used to check the file route options\n  const fileRouteOptions = checkFileObjectKey({\n    str: generatePermittedFileTypes(routeConfig).fileTypes[0],\n    obj: routeConfig,\n  });\n\n  // [2]. Handlers\n  // Used to handle the dropzone drop event\n  const onDrop = useCallback(\n    (acceptedFiles: File[]) => {\n      // Set the start upload state to false to avoid reuploading the same files\n      setStartUpload(false);\n\n      // At this moment, the files are not uploaded, so we set the status to \"not started\"\n      addFiles(\n        instanceId,\n        acceptedFiles.map((file) => ({\n          id: createId(),\n          file,\n          status: \"not started\",\n          createdAt: new Date(),\n        })),\n        routeDetails ?? {}\n      );\n    },\n    [addFiles, instanceId, routeDetails]\n  );\n\n  // Used to get the dropzone props\n  const { getRootProps, getInputProps } = useDropzone({\n    onDrop,\n    accept: generateClientDropzoneAccept(\n      generatePermittedFileTypes(routeConfig).fileTypes\n    ),\n    multiple:\n      routeDetails?.maxFileCount === undefined || routeDetails.maxFileCount > 1,\n    // Enforce the same limit at the dropzone level\n    maxFiles: routeDetails?.maxFileCount ?? undefined,\n  });\n\n  function uploadButtonClicked() {\n    if (!canUpload) return;\n\n    setStartUpload(true);\n\n    // Close the dialog\n    setOpen(false);\n  }\n\n  // If the file route options are not found then return\n  if (!fileRouteOptions) return;\n\n  // [3]. JSX\n  if (isDesktop) {\n    return (\n      <>\n        <Dialog open={open} onOpenChange={setOpen}>\n          <DialogTrigger asChild>\n            <DropzoneDialogAndDrawerActionButton\n              onClick={() => setOpen(true)}\n              children={children}\n            />\n          </DialogTrigger>\n          <DialogContent>\n            <DialogHeader>\n              <DialogTitle>Upload Files</DialogTitle>\n              <DialogDescription asChild>\n                <div className=\"overflow-hidden py-4 flex-col rounded-md flex items-center justify-center relative\">\n                  {/* Dropzone */}\n                  <div\n                    className=\"absolute top-0 left-0 w-full h-full\"\n                    {...getRootProps()}\n                  ></div>\n                  {/* Hidden input to allow selection of files */}\n                  <input {...getInputProps()} />\n                  {filesNotStarted.length > 0 ? (\n                    <div className=\"w-full border rounded-md overflow-hidden border-dashed px-4 py-8\">\n                      <div className=\"w-full px-4 md:px-16\">\n                        {filesNotStarted.map((file) => (\n                          <DropzoneFileDetails\n                            key={file.id}\n                            file={file}\n                            instanceId={instanceId}\n                          />\n                        ))}\n                      </div>\n                    </div>\n                  ) : (\n                    <div className=\"border w-full py-4 rounded-md border-dashed flex items-center justify-center flex-col gap-4\">\n                      <UploadCloud className=\"w-12 h-12\" />\n                      <p className=\"text-sm text-primary\">\n                        Choose files or drag and drop\n                      </p>\n                      {showDetails && (\n                        <ButtonDetails\n                          acceptedFileTypes={acceptedFileTypes}\n                          maxFileCount={routeDetails?.maxFileCount ?? 0}\n                          minFileCount={routeDetails?.minFileCount ?? 0}\n                          maxFileSize={fileRouteOptions.maxFileSize}\n                        />\n                      )}\n                    </div>\n                  )}\n                </div>\n              </DialogDescription>\n            </DialogHeader>\n\n            <DialogFooter>\n              <DropzoneDialogAndDrawerActionButton\n                onClick={uploadButtonClicked}\n                children={children}\n                className=\"w-full\"\n                disabled={!canUpload}\n              />\n            </DialogFooter>\n          </DialogContent>\n        </Dialog>\n        {/* Uploading toasts */}\n        {startUpload &&\n          files.map((file) => (\n            <UploadingToast\n              key={file.id}\n              file={file}\n              props={props}\n              instanceId={instanceId}\n            />\n          ))}\n      </>\n    );\n  }\n\n  return (\n    <>\n      <Drawer open={open} onOpenChange={setOpen}>\n        <DrawerTrigger asChild>\n          <DropzoneDialogAndDrawerActionButton\n            onClick={() => setOpen(true)}\n            children={children}\n          />\n        </DrawerTrigger>\n        <DrawerContent>\n          {/* For sm reason only max-h accepts only 75vh. Nothing else works  */}\n          {/* Don't change this to overflow-y-auto or overflow-y-scroll */}\n          <DrawerHeader className=\"overflow-y-scroll max-h-[75vh]\">\n            <DrawerTitle asChild>\n              <div className=\"relative\">\n                <p className=\"\">Upload Files</p>\n\n                {/* Copied from shadcn/ui/dialog.tsx */}\n                <div className=\"absolute right-0 top-0 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n                  <div className=\"rounded-sm text-xs border py-1 px-2 hover:bg-muted\">\n                    Esc\n                  </div>\n                  <span className=\"sr-only\">Close</span>\n                </div>\n              </div>\n            </DrawerTitle>\n            <DrawerDescription asChild>\n              <div className=\"relative max-h-[50%] overflow-hidden py-4\">\n                {/* Dropzone */}\n                <div\n                  className=\"absolute top-0 left-0 w-full h-full\"\n                  {...getRootProps()}\n                ></div>\n                {/* Hidden input to allow selection of files */}\n                <input {...getInputProps()} />\n                {filesNotStarted.length > 0 ? (\n                  <div className=\"w-full border rounded-md overflow-hidden border-dashed px-4 py-8\">\n                    <div className=\"w-full px-4 md:px-16\">\n                      {filesNotStarted.map((file) => (\n                        <DropzoneFileDetails\n                          key={file.id}\n                          file={file}\n                          instanceId={instanceId}\n                        />\n                      ))}\n                    </div>\n                  </div>\n                ) : (\n                  <div className=\"border w-full py-4 rounded-md border-dashed flex items-center justify-center flex-col gap-4\">\n                    <UploadCloud className=\"w-12 h-12\" />\n                    <p className=\"text-sm text-primary\">\n                      Choose files or drag and drop\n                    </p>\n                    {showDetails && (\n                      <ButtonDetails\n                        acceptedFileTypes={acceptedFileTypes}\n                        maxFileCount={routeDetails?.maxFileCount ?? 0}\n                        minFileCount={routeDetails?.minFileCount ?? 0}\n                        maxFileSize={fileRouteOptions.maxFileSize}\n                      />\n                    )}\n                  </div>\n                )}\n              </div>\n            </DrawerDescription>\n          </DrawerHeader>\n          <DrawerFooter>\n            <DropzoneDialogAndDrawerActionButton\n              onClick={uploadButtonClicked}\n              children={children}\n              className=\"w-full\"\n              disabled={!canUpload}\n            />\n          </DrawerFooter>\n        </DrawerContent>\n      </Drawer>\n      {/* Uploading toasts */}\n      {startUpload &&\n        files.map((file) => (\n          <UploadingToast\n            key={file.id}\n            file={file}\n            props={props}\n            instanceId={instanceId}\n          />\n        ))}\n    </>\n  );\n}\n\n/**\n * @description A component that renders a button for the dropzone dialog and drawer.\n * @param {React.ReactNode} children - The children to render.\n * @param {() => void} onClick - The onClick handler.\n */\nfunction DropzoneDialogAndDrawerActionButton({\n  onClick,\n  className,\n  children,\n  disabled,\n}: {\n  onClick: () => void;\n  className?: string;\n  children?: React.ReactNode;\n  disabled?: boolean;\n}) {\n  // /* If a custom button has returned then render that and attach the onClick handler to it\n  if (children && isValidElement(children)) {\n    return cloneElement(children as React.ReactElement<any>, {\n      onClick,\n      disabled,\n      ...(children as React.ReactElement<any>).props,\n    }) as React.ReactElement;\n  }\n\n  return (\n    <Button\n      className={cn(\"w-fit\", className)}\n      onClick={onClick}\n      disabled={disabled}\n    >\n      <Upload className=\"w-4 h-4\" />\n      <span className=\"ml-2\">Upload</span>\n    </Button>\n  );\n}\n\n/**\n * @description A component that displays the uploading toast.\n * @param {UTUIFile} file - The file to upload.\n * @param {UploadButtonProps} props - The props for the UploadButton component.\n * @param {string} instanceId - The instance ID for the upload. Required to avoid multiple instances of the same component if multiple upload buttons are used.\n */\nfunction UploadingToast({\n  file,\n  props,\n  instanceId,\n}: {\n  file: UTUIFile;\n  props: UploadButtonProps;\n  instanceId: string;\n}) {\n  // [1]. States, Refs, Hooks, etc.\n  const { endpoint, ...restProps } = props;\n\n  const fileUploadRef = useRef(false);\n\n  // Used to create an abort controller\n  const abortControllerRef = useRef<AbortController | null>(\n    new AbortController()\n  );\n\n  const { removeFiles, updateFile, getFiles } = useFileStorageStore();\n\n  // Used to start the upload\n  const { startUpload } = useUploadThing(endpoint, {\n    ...restProps,\n    // Set the upload progress granularity to \"fine\" if not provided\n    uploadProgressGranularity: restProps.uploadProgressGranularity ?? \"fine\",\n    signal: abortControllerRef.current?.signal,\n    onUploadError: (error) => {\n      // Run the onUploadError prop if provided\n      restProps.onUploadError?.(error);\n\n      // Update the file status to \"error\" and set the error message\n      updateFile(instanceId, {\n        ...file,\n        status: \"error\",\n        error: error.message,\n      });\n      throw new Error(error.message);\n    },\n    onBeforeUploadBegin: (files) => {\n      // Run the onUploadBegin prop if provided\n      restProps?.onUploadBegin?.(file.file.name);\n\n      // Update the file status to \"uploading\"\n      updateFile(instanceId, { ...file, status: \"uploading\" });\n\n      return files;\n    },\n\n    onClientUploadComplete: (res) => {\n      // Run the onClientUploadComplete prop if provided\n      restProps?.onClientUploadComplete?.(res);\n\n      // Update the file status to \"uploaded\"\n      updateFile(instanceId, { ...file, status: \"uploaded\" });\n    },\n  });\n\n  // [2]. Effects\n  // This effect will only then start the upload to avoid rerendering / reuploading the same files\n  useEffect(() => {\n    if (!fileUploadRef.current && file.status === \"not started\") {\n      // Set the file upload ref to true to avoid reuploading the same file\n      fileUploadRef.current = true;\n\n      // Start the upload\n      const fileUploadPromise = startUpload([file.file]);\n\n      // Render the toast\n      toast.promise(fileUploadPromise, {\n        loading: (\n          <div className=\"flex flex-col\">\n            <p>Uploading</p>\n            <p>\n              {truncateFileName(file.file.name)} (\n              {getFileSizeFormatted(file.file.size)})\n            </p>\n          </div>\n        ),\n        success: () => {\n          // Remove the file from the state to avoid reuploading the same file\n          removeFiles(instanceId, file.id);\n\n          return {\n            message: `Uploaded`,\n            description: `${truncateFileName(\n              file.file.name\n            )} - (${getFileSizeFormatted(file.file.size)})`,\n          };\n        },\n        error: () => {\n          const currentFile = getFiles(instanceId).find(\n            (f) => f.id === file.id\n          );\n\n          // Remove the file from the state to avoid reuploading the same file\n          removeFiles(instanceId, file.id);\n\n          return {\n            message: `${currentFile?.error\n              ? truncateFileName(currentFile.error, 32)\n              : \"Failed to upload\"\n              }`,\n            description: `${truncateFileName(\n              file.file.name\n            )} - (${getFileSizeFormatted(file.file.size)})`,\n          };\n        },\n        action: {\n          // If the file is still uploading then show the cancel button, otherwise show the close button\n          label: `Close`,\n          onClick: () => {\n            // Remove the file and abort the upload\n            abortControllerRef.current?.abort();\n            removeFiles(instanceId, file.id);\n          },\n        },\n      });\n    }\n  }, [file]);\n\n  // Returning null because the toast is rendered by the useUploadThing hook\n  return null;\n}\n\n/**\n * @description A component that displays the details of the upload files.\n * @param {UTUIFile} file - The file to upload.\n * @param {string} instanceId - The instance ID for the upload. Required to avoid multiple instances of the same component if multiple upload buttons are used.\n */\nfunction DropzoneFileDetails({\n  file,\n  instanceId,\n}: {\n  file: UTUIFile;\n  instanceId: string;\n}) {\n  // [1]. States, Refs, Hooks, etc.\n  const { removeFiles } = useFileStorageStore();\n\n  // [2]. Handlers\n  // Used to remove the file from the state\n  function removeFileOnClick() {\n    removeFiles(instanceId, file.id);\n  }\n\n  // [3]. JSX\n  return (\n    <div className=\"flex overflow-hidden border-b-2 items-center relative gap-4 h-fit sm:text-left text-center w-full px-4 py-4\">\n      <File className=\"w-6 h-6 absolute top-1/2 left-2 -translate-y-1/2\" />\n      <Tooltip>\n        <TooltipTrigger>\n          <p className=\"text-xs w-full truncate line-clamp-1 overflow-hidden px-6\">\n            {truncateFileName(file.file.name, 40)}\n          </p>\n        </TooltipTrigger>\n        <TooltipContent>\n          <p>{file.file.name}</p>\n        </TooltipContent>\n      </Tooltip>\n      <div className=\"z-50 absolute top-1/2 right-0 -translate-y-1/2 flex items-center justify-center bg-background h-full\">\n        <X\n          className=\"cursor-pointer w-6 h-6 text-primary\"\n          onClick={removeFileOnClick}\n        />\n      </div>\n    </div>\n  );\n}\n\n/**\n * @description A component that displays the details of the upload button.\n * @param {string} acceptedFileTypes - The accepted file types.\n * @param {number} maxFileCount - The maximum number of files that can be uploaded.\n * @param {string} maxFileSize - The maximum file size that can be uploaded.\n */\nfunction ButtonDetails({\n  acceptedFileTypes,\n  maxFileCount,\n  maxFileSize,\n  minFileCount,\n}: {\n  acceptedFileTypes: string;\n  maxFileCount: number;\n  maxFileSize: string;\n  minFileCount: number;\n}) {\n  // [1]. JSX\n  return (\n    <div className=\"flex gap-2 flex-wrap items-center justify-center text-sm\">\n      <span className=\"text-center\">Allowed type: {acceptedFileTypes}</span>\n      <span className=\"text-center\">\n        Atleast {minFileCount > 1 ? minFileCount : 1} file(s)\n      </span>\n      {maxFileCount > 0 && (\n        <span className=\"text-center\">Atmost {maxFileCount} file(s)</span>\n      )}\n      <span className=\"text-center\">Up to {maxFileSize} each</span>\n    </div>\n  );\n}\n",
      "type": "registry:component",
      "target": "components/uploadthingui/dropzone-dialog.tsx"
    },
    {
      "path": "hooks/use-media-query.tsx",
      "content": "import * as React from \"react\";\n\n/**\n * @description A hook that returns the value of a media query.\n * @param {string} query - The media query to check.\n * @returns {boolean} The value of the media query.\n */\nexport function useMediaQuery(query: string) {\n  const [value, setValue] = React.useState(false);\n\n  React.useEffect(() => {\n    function onChange(event: MediaQueryListEvent) {\n      setValue(event.matches);\n    }\n\n    const result = matchMedia(query);\n    result.addEventListener(\"change\", onChange);\n    setValue(result.matches);\n\n    return () => result.removeEventListener(\"change\", onChange);\n  }, [query]);\n\n  return value;\n}\n",
      "type": "registry:hook"
    },
    {
      "path": "stores/main.ts",
      "content": "import { toast } from \"sonner\";\nimport { create } from \"zustand\";\n\nexport type UTUIFile = {\n  file: File;\n  id: string;\n  status: \"uploading\" | \"uploaded\" | \"not started\" | \"error\";\n  error?: string;\n  createdAt: Date;\n};\n\ntype additionalDetails = {\n  maxFileCount?: number;\n  minFileCount?: number;\n};\n\ninterface FileStorageState {\n  instances: Record<string, UTUIFile[]>;\n  addFiles: (\n    instanceId: string,\n    files: UTUIFile[],\n    additionalDetails: additionalDetails\n  ) => void;\n  removeFiles: (instanceId: string, fileId: string) => void;\n  updateFile: (instanceId: string, file: UTUIFile) => void;\n  getFiles: (instanceId: string) => UTUIFile[];\n}\n\nconst defaultFileStorageState = {\n  instances: {},\n};\n\nexport const useFileStorageStore = create<FileStorageState>()((set, get) => ({\n  ...defaultFileStorageState,\n  // Takes an array of files and add them to the state for a specific instance\n  addFiles: (\n    instanceId: string,\n    files: UTUIFile[],\n    additionalDetails: additionalDetails\n  ) => {\n    if (\n      additionalDetails.maxFileCount &&\n      get().getFiles(instanceId).length + files.length >\n        additionalDetails.maxFileCount\n    ) {\n      toast.error(`Failed to upload!`, {\n        description: `Max file count of ${additionalDetails.maxFileCount} exceeded.`,\n        action: {\n          label: `Close`,\n          onClick: () => toast.dismiss(),\n        },\n      });\n      return;\n    }\n\n    if (\n      additionalDetails.minFileCount &&\n      get().getFiles(instanceId).length + files.length <\n        additionalDetails.minFileCount\n    ) {\n      toast.error(`Failed to upload!`, {\n        description: `Required to upload at least ${additionalDetails.minFileCount} files.`,\n        action: {\n          label: `Close`,\n          onClick: () => toast.dismiss(),\n        },\n      });\n      return;\n    }\n    return set((state) => ({\n      instances: {\n        ...state.instances,\n        [instanceId]: [...(state.instances[instanceId] || []), ...files],\n      },\n    }));\n  },\n  // Takes an array of files and remove them from the state for a specific instance\n  removeFiles: (instanceId: string, fileId: string) => {\n    return set((state) => ({\n      instances: {\n        ...state.instances,\n        [instanceId]: (state.instances[instanceId] || []).filter(\n          (file) => file.id !== fileId\n        ),\n      },\n    }));\n  },\n  updateFile: (instanceId: string, file: UTUIFile) =>\n    set((state) => ({\n      instances: {\n        ...state.instances,\n        [instanceId]: (state.instances[instanceId] || []).map((f) =>\n          f.id === file.id ? file : f\n        ),\n      },\n    })),\n  getFiles: (instanceId: string) => get().instances[instanceId] || [],\n}));\n",
      "type": "registry:file",
      "target": "stores/main.ts"
    },
    {
      "path": "lib/uploadthingui-utils.ts",
      "content": "import { type ExpandedRouteConfig, type FileRouterInputKey } from \"@uploadthing/shared\";\n\nexport function getFileSizeFormatted(size: number) {\n  if (size < 1024) return `${size} B`;\n  if (size < 1024 * 1024) return `${(size / 1024).toFixed(0)} KB`;\n  if (size < 1024 * 1024 * 1024) return `${(size / 1024 / 1024).toFixed(1)} MB`;\n  return `${(size / 1024 / 1024 / 1024).toFixed(2)} GB`;\n}\n\n// Return the objects value\nexport function checkFileObjectKey({\n  str,\n  obj,\n}: {\n  str: FileRouterInputKey | undefined;\n  obj: ExpandedRouteConfig | undefined;\n}) {\n  if (!str || !obj) return null;\n\n  if (obj && typeof obj === \"object\" && obj.hasOwnProperty(str)) {\n    return obj[str];\n  } else {\n    return null;\n  }\n}\n\n/**\n * @description A utility function that truncates the file name to a maximum number of characters.\n * @param {string} fileName - The file name to truncate.\n * @param {number} maxChars - The maximum number of characters to truncate the file name to. Default is 24.\n * @returns {string} The truncated file name.\n */\nexport function truncateFileName(fileName: string, maxChars?: number) {\n  if (fileName.length > 20) {\n    return `${fileName.slice(0, maxChars ?? 24)}...`;\n  }\n  return fileName;\n}\n",
      "type": "registry:lib"
    },
    {
      "path": "lib/uploadthing.ts",
      "content": "import {\n  generateUploadButton,\n  generateUploadDropzone,\n  generateReactHelpers,\n} from \"@uploadthing/react\";\nimport { type OurFileRouter } from \"./uploadthingui-types\";\n\nexport const UploadButton = generateUploadButton<OurFileRouter>();\nexport const UploadDropzone = generateUploadDropzone<OurFileRouter>();\nexport const { useUploadThing, uploadFiles } = generateReactHelpers<OurFileRouter>();\n\n// Export a type that users can extend if needed\nexport type FileRouter = OurFileRouter;",
      "type": "registry:lib"
    },
    {
      "path": "lib/uploadthingui-types.ts",
      "content": "import { type FileRouter } from \"uploadthing/next\";\n\n// Export a basic FileRouter type that users can extend\nexport type OurFileRouter = FileRouter;",
      "type": "registry:lib"
    },
    {
      "path": "components/ui/button.tsx",
      "content": "import * as React from \"react\";\nimport { Slot } from \"@radix-ui/react-slot\";\nimport { cva, type VariantProps } from \"class-variance-authority\";\n\nimport { cn } from \"@/lib/utils\";\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-primary text-primary-foreground hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-destructive-foreground hover:bg-destructive/90\",\n        outline:\n          \"border border-input bg-background hover:bg-accent hover:text-accent-foreground\",\n        secondary:\n          \"bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-10 px-4 py-2\",\n        sm: \"h-9 rounded-md px-3\",\n        lg: \"h-11 rounded-md px-8\",\n        icon: \"h-9 w-9\",\n        xs: \"h-7 rounded-md px-2\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n);\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean;\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\";\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    );\n  }\n);\nButton.displayName = \"Button\";\n\nexport { Button, buttonVariants };\n",
      "type": "registry:ui",
      "target": ""
    },
    {
      "path": "components/ui/dialog.tsx",
      "content": "\"use client\";\n\nimport * as React from \"react\";\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\";\n\nimport { cn } from \"@/lib/utils\";\n\nconst Dialog = DialogPrimitive.Root;\n\nconst DialogTrigger = DialogPrimitive.Trigger;\n\nconst DialogPortal = DialogPrimitive.Portal;\n\nconst DialogClose = DialogPrimitive.Close;\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n));\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName;\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content> & {}\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        // For sm reason only max-h accepts only 75vh. Nothing else works\n        // Don't change this to overflow-y-auto or overflow-y-scroll\n        \"overflow-y-scroll max-h-[75vh]\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-6 top-3.5 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        {/* <X className=\"h-4 w-4\" /> */}\n        <div className=\"rounded-sm text-xs border py-1 px-2 hover:bg-muted\">\n          Esc\n        </div>\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n));\nDialogContent.displayName = DialogPrimitive.Content.displayName;\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n);\nDialogHeader.displayName = \"DialogHeader\";\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n);\nDialogFooter.displayName = \"DialogFooter\";\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n));\nDialogTitle.displayName = DialogPrimitive.Title.displayName;\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n));\nDialogDescription.displayName = DialogPrimitive.Description.displayName;\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n};\n",
      "type": "registry:ui",
      "target": ""
    },
    {
      "path": "components/ui/drawer.tsx",
      "content": "\"use client\";\n\nimport * as React from \"react\";\nimport { Drawer as DrawerPrimitive } from \"vaul\";\n\nimport { cn } from \"@/lib/utils\";\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n);\nDrawer.displayName = \"Drawer\";\n\nconst DrawerTrigger = DrawerPrimitive.Trigger;\n\nconst DrawerPortal = DrawerPrimitive.Portal;\n\nconst DrawerClose = DrawerPrimitive.Close;\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n));\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName;\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n));\nDrawerContent.displayName = \"DrawerContent\";\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n);\nDrawerHeader.displayName = \"DrawerHeader\";\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n);\nDrawerFooter.displayName = \"DrawerFooter\";\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n));\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName;\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n));\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName;\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n};\n",
      "type": "registry:ui",
      "target": ""
    },
    {
      "path": "components/ui/tooltip.tsx",
      "content": "\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Portal>\n    <TooltipPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 overflow-hidden rounded-md bg-primary px-3 py-1.5 text-xs text-primary-foreground animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-tooltip-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </TooltipPrimitive.Portal>\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n",
      "type": "registry:ui",
      "target": ""
    }
  ]
}