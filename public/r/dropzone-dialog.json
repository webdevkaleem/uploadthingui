{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "dropzone-dialog",
  "type": "registry:block",
  "title": "Dropzone Dialog",
  "description": "An upload button component which opens up a dialog with a dropzone and uses toasts as its response method.",
  "dependencies": [
    "lucide-react@^0.435.0",
    "@paralleldrive/cuid2@^2.2.2",
    "uploadthing@^7.7.2",
    "@uploadthing/react@^7.3.1",
    "@uploadthing/shared@^7.1.8",
    "@radix-ui/react-slot",
    "class-variance-authority",
    "clsx",
    "tailwind-merge",
    ".",
    "@radix-ui/react-dialog",
    "vaul",
    "@radix-ui/react-tooltip",
    "@uploadthing/react",
    "uploadthing",
    "@upstash/redis",
    "@upstash/ratelimit",
    "@uploadthing/shared",
    "sonner",
    "zustand",
    "@paralleldrive/cuid2",
    "lucide-react"
  ],
  "registryDependencies": [
    "sonner",
    "button",
    "dialog",
    "drawer",
    "tooltip"
  ],
  "files": [
    {
      "path": "registry/new-york/dropzone-dialog/dropzone-dialog.tsx",
      "content": "\"use client\";\r\n\r\nimport { Button } from \"@/components/ui/button\";\r\nimport {\r\n  Dialog,\r\n  DialogContent,\r\n  DialogDescription,\r\n  DialogFooter,\r\n  DialogHeader,\r\n  DialogTitle,\r\n  DialogTrigger,\r\n} from \"@/components/ui/dialog\";\r\nimport {\r\n  Drawer,\r\n  DrawerContent,\r\n  DrawerDescription,\r\n  DrawerFooter,\r\n  DrawerHeader,\r\n  DrawerTitle,\r\n  DrawerTrigger,\r\n} from \"@/components/ui/drawer\";\r\nimport {\r\n  Tooltip,\r\n  TooltipContent,\r\n  TooltipTrigger,\r\n} from \"@/components/ui/tooltip\";\r\nimport ButtonDetails from \"@/components/uploadthingui/common/button-details\";\r\nimport { useMediaQuery } from \"@/hooks/use-media-query\";\r\nimport { UploadButton, useUploadThing } from \"@/lib/uploadthing\";\r\nimport {\r\n  checkFileObjectKey,\r\n  getFileSizeFormatted,\r\n  truncateFileName,\r\n} from \"@/lib/uploadthingui-utils\";\r\nimport { cn } from \"@/lib/utils\";\r\nimport { useFileStorageStore, UTUIFile } from \"@/stores/main\";\r\nimport { createId } from \"@paralleldrive/cuid2\";\r\nimport { useDropzone } from \"@uploadthing/react\";\r\nimport {\r\n  generateClientDropzoneAccept,\r\n  generatePermittedFileTypes,\r\n} from \"@uploadthing/shared\";\r\nimport { File, Upload, UploadCloud, X } from \"lucide-react\";\r\nimport {\r\n  cloneElement,\r\n  isValidElement,\r\n  useCallback,\r\n  useEffect,\r\n  useRef,\r\n  useState,\r\n  type ComponentProps,\r\n} from \"react\";\r\nimport { toast } from \"sonner\";\r\n\r\n// Get the props type directly from UploadButton\r\ntype UploadButtonProps = ComponentProps<typeof UploadButton>;\r\n\r\n/**\r\n * @description An upload button component which opens up a dialog with a dropzone and uses toasts as its response method.\r\n * @param {UploadButtonProps} props - The props for the UploadButton component.\r\n * @param {boolean} showDetails - Whether to show the details of the upload.\r\n * @param {string} instanceId - The instance ID for the upload. Required to avoid multiple instances of the same component if multiple upload buttons are used.\r\n * @param {boolean} allowInBetweenUploads - Whether to allow in between uploads.\r\n * @param {routeDetails} routeDetails - Additional details for the upload; Example: maxFileCount, minFileCount, etc.\r\n * @param {React.ReactNode} children - React node to render a custom button component.\r\n */\r\nexport default function DropzoneDialog({\r\n  props,\r\n  showDetails = true,\r\n  instanceId,\r\n  allowInBetweenUploads = true,\r\n  routeDetails,\r\n  children,\r\n}: {\r\n  props: UploadButtonProps;\r\n  showDetails?: boolean;\r\n  instanceId: string;\r\n  allowInBetweenUploads?: boolean;\r\n  routeDetails?: {\r\n    maxFileCount?: number;\r\n    minFileCount?: number;\r\n  };\r\n  children?: React.ReactNode;\r\n}) {\r\n  // [1]. States, Refs, Hooks, etc.\r\n  const { endpoint, ...restProps } = props;\r\n  const isDesktop = useMediaQuery(\"(min-width: 768px)\");\r\n\r\n  const [open, setOpen] = useState(false);\r\n\r\n  // Used to start the combined upload\r\n  const [startUpload, setStartUpload] = useState(false);\r\n\r\n  const { getFiles, addFiles, removeFiles } = useFileStorageStore();\r\n\r\n  const files = getFiles(instanceId);\r\n  const filesNotStarted = files.filter((file) => file.status === \"not started\");\r\n  const { routeConfig } = useUploadThing(endpoint, {\r\n    ...restProps,\r\n  });\r\n\r\n  const canUpload =\r\n    allowInBetweenUploads ||\r\n    files.filter((file) => file.status === \"uploading\").length === 0;\r\n\r\n  // Used to generate the accepted file types\r\n  const acceptedFileTypes = generatePermittedFileTypes(routeConfig)\r\n    .fileTypes.map((fileType) => {\r\n      if (fileType.includes(\"/\")) {\r\n        return fileType;\r\n      } else {\r\n        return `${fileType}/*`;\r\n      }\r\n    })\r\n    .join(\",\");\r\n\r\n  // Used to check the file route options\r\n  const fileRouteOptions = checkFileObjectKey({\r\n    str: generatePermittedFileTypes(routeConfig).fileTypes[0],\r\n    obj: routeConfig,\r\n  });\r\n\r\n  // If the file route options are not found then return\r\n  if (!fileRouteOptions) return;\r\n\r\n  // [2]. Handlers\r\n  // Used to handle the dropzone drop event\r\n  const onDrop = useCallback(\r\n    (acceptedFiles: File[]) => {\r\n      // Set the start upload state to false to avoid reuploading the same files\r\n      setStartUpload(false);\r\n\r\n      // At this moment, the files are not uploaded, so we set the status to \"not started\"\r\n      addFiles(\r\n        instanceId,\r\n        acceptedFiles.map((file) => ({\r\n          id: createId(),\r\n          file,\r\n          status: \"not started\",\r\n          createdAt: new Date(),\r\n        })),\r\n        routeDetails ?? {}\r\n      );\r\n    },\r\n    [addFiles, instanceId, routeDetails]\r\n  );\r\n\r\n  // Used to get the dropzone props\r\n  const { getRootProps, getInputProps } = useDropzone({\r\n    onDrop,\r\n    accept: generateClientDropzoneAccept(\r\n      generatePermittedFileTypes(routeConfig).fileTypes\r\n    ),\r\n    multiple:\r\n      routeDetails?.maxFileCount === undefined || routeDetails.maxFileCount > 1,\r\n    // Enforce the same limit at the dropzone level\r\n    maxFiles: routeDetails?.maxFileCount ?? undefined,\r\n  });\r\n\r\n  function uploadButtonClicked() {\r\n    if (!canUpload) return;\r\n\r\n    setStartUpload(true);\r\n\r\n    // Close the dialog\r\n    setOpen(false);\r\n  }\r\n\r\n  // [3]. JSX\r\n  if (isDesktop) {\r\n    return (\r\n      <>\r\n        <Dialog open={open} onOpenChange={setOpen}>\r\n          <DialogTrigger asChild>\r\n            <DropzoneDialogAndDrawerActionButton\r\n              onClick={() => setOpen(true)}\r\n              children={children}\r\n            />\r\n          </DialogTrigger>\r\n          <DialogContent>\r\n            <DialogHeader>\r\n              <DialogTitle>Upload Files</DialogTitle>\r\n              <DialogDescription asChild>\r\n                <div className=\"overflow-hidden py-4 flex-col rounded-md flex items-center justify-center relative\">\r\n                  {/* Dropzone */}\r\n                  <div\r\n                    className=\"absolute top-0 left-0 w-full h-full\"\r\n                    {...getRootProps()}\r\n                  ></div>\r\n                  {/* Hidden input to allow selection of files */}\r\n                  <input {...getInputProps()} />\r\n                  {filesNotStarted.length > 0 ? (\r\n                    <div className=\"w-full border rounded-md overflow-hidden border-dashed px-4 py-8\">\r\n                      <div className=\"w-full px-4 md:px-16\">\r\n                        {filesNotStarted.map((file) => (\r\n                          <DropzoneFileDetails\r\n                            key={file.id}\r\n                            file={file}\r\n                            instanceId={instanceId}\r\n                          />\r\n                        ))}\r\n                      </div>\r\n                    </div>\r\n                  ) : (\r\n                    <div className=\"border w-full py-4 rounded-md border-dashed flex items-center justify-center flex-col gap-4\">\r\n                      <UploadCloud className=\"w-12 h-12\" />\r\n                      <p className=\"text-sm text-primary\">\r\n                        Choose files or drag and drop\r\n                      </p>\r\n                      {showDetails && (\r\n                        <ButtonDetails\r\n                          acceptedFileTypes={acceptedFileTypes}\r\n                          maxFileCount={routeDetails?.maxFileCount ?? 0}\r\n                          minFileCount={routeDetails?.minFileCount ?? 0}\r\n                          maxFileSize={fileRouteOptions.maxFileSize}\r\n                        />\r\n                      )}\r\n                    </div>\r\n                  )}\r\n                </div>\r\n              </DialogDescription>\r\n            </DialogHeader>\r\n\r\n            <DialogFooter>\r\n              <DropzoneDialogAndDrawerActionButton\r\n                onClick={uploadButtonClicked}\r\n                children={children}\r\n                className=\"w-full\"\r\n                disabled={!canUpload}\r\n              />\r\n            </DialogFooter>\r\n          </DialogContent>\r\n        </Dialog>\r\n        {/* Uploading toasts */}\r\n        {startUpload &&\r\n          files.map((file) => (\r\n            <UploadingToast\r\n              key={file.id}\r\n              file={file}\r\n              props={props}\r\n              instanceId={instanceId}\r\n            />\r\n          ))}\r\n      </>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <Drawer open={open} onOpenChange={setOpen}>\r\n        <DrawerTrigger asChild>\r\n          <DropzoneDialogAndDrawerActionButton\r\n            onClick={() => setOpen(true)}\r\n            children={children}\r\n          />\r\n        </DrawerTrigger>\r\n        <DrawerContent>\r\n          {/* For sm reason only max-h accepts only 75vh. Nothing else works  */}\r\n          {/* Don't change this to overflow-y-auto or overflow-y-scroll */}\r\n          <DrawerHeader className=\"overflow-y-scroll max-h-[75vh]\">\r\n            <DrawerTitle asChild>\r\n              <div className=\"relative\">\r\n                <p className=\"\">Upload Files</p>\r\n\r\n                {/* Copied from shadcn/ui/dialog.tsx */}\r\n                <div className=\"absolute right-0 top-0 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\r\n                  <div className=\"rounded-sm text-xs border py-1 px-2 hover:bg-muted\">\r\n                    Esc\r\n                  </div>\r\n                  <span className=\"sr-only\">Close</span>\r\n                </div>\r\n              </div>\r\n            </DrawerTitle>\r\n            <DrawerDescription asChild>\r\n              <div className=\"relative max-h-[50%] overflow-hidden py-4\">\r\n                {/* Dropzone */}\r\n                <div\r\n                  className=\"absolute top-0 left-0 w-full h-full\"\r\n                  {...getRootProps()}\r\n                ></div>\r\n                {/* Hidden input to allow selection of files */}\r\n                <input {...getInputProps()} />\r\n                {filesNotStarted.length > 0 ? (\r\n                  <div className=\"w-full border rounded-md overflow-hidden border-dashed px-4 py-8\">\r\n                    <div className=\"w-full px-4 md:px-16\">\r\n                      {filesNotStarted.map((file) => (\r\n                        <DropzoneFileDetails\r\n                          key={file.id}\r\n                          file={file}\r\n                          instanceId={instanceId}\r\n                        />\r\n                      ))}\r\n                    </div>\r\n                  </div>\r\n                ) : (\r\n                  <div className=\"border w-full py-4 rounded-md border-dashed flex items-center justify-center flex-col gap-4\">\r\n                    <UploadCloud className=\"w-12 h-12\" />\r\n                    <p className=\"text-sm text-primary\">\r\n                      Choose files or drag and drop\r\n                    </p>\r\n                    {showDetails && (\r\n                      <ButtonDetails\r\n                        acceptedFileTypes={acceptedFileTypes}\r\n                        maxFileCount={routeDetails?.maxFileCount ?? 0}\r\n                        minFileCount={routeDetails?.minFileCount ?? 0}\r\n                        maxFileSize={fileRouteOptions.maxFileSize}\r\n                      />\r\n                    )}\r\n                  </div>\r\n                )}\r\n              </div>\r\n            </DrawerDescription>\r\n          </DrawerHeader>\r\n          <DrawerFooter>\r\n            <DropzoneDialogAndDrawerActionButton\r\n              onClick={uploadButtonClicked}\r\n              children={children}\r\n              className=\"w-full\"\r\n              disabled={!canUpload}\r\n            />\r\n          </DrawerFooter>\r\n        </DrawerContent>\r\n      </Drawer>\r\n      {/* Uploading toasts */}\r\n      {startUpload &&\r\n        files.map((file) => (\r\n          <UploadingToast\r\n            key={file.id}\r\n            file={file}\r\n            props={props}\r\n            instanceId={instanceId}\r\n          />\r\n        ))}\r\n    </>\r\n  );\r\n}\r\n\r\n/**\r\n * @description A component that renders a button for the dropzone dialog and drawer.\r\n * @param {React.ReactNode} children - The children to render.\r\n * @param {() => void} onClick - The onClick handler.\r\n */\r\nfunction DropzoneDialogAndDrawerActionButton({\r\n  onClick,\r\n  className,\r\n  children,\r\n  disabled,\r\n}: {\r\n  onClick: () => void;\r\n  className?: string;\r\n  children?: React.ReactNode;\r\n  disabled?: boolean;\r\n}) {\r\n  // /* If a custom button has returned then render that and attach the onClick handler to it\r\n  if (children && isValidElement(children)) {\r\n    return cloneElement(children as React.ReactElement, {\r\n      onClick,\r\n      disabled,\r\n    }) as React.ReactElement;\r\n  }\r\n\r\n  return (\r\n    <Button\r\n      className={cn(\"w-fit\", className)}\r\n      onClick={onClick}\r\n      disabled={disabled}\r\n    >\r\n      <Upload className=\"w-4 h-4\" />\r\n      <span className=\"ml-2\">Upload</span>\r\n    </Button>\r\n  );\r\n}\r\n\r\n/**\r\n * @description A component that displays the uploading toast.\r\n * @param {UTUIFile} file - The file to upload.\r\n * @param {UploadButtonProps} props - The props for the UploadButton component.\r\n * @param {string} instanceId - The instance ID for the upload. Required to avoid multiple instances of the same component if multiple upload buttons are used.\r\n */\r\nfunction UploadingToast({\r\n  file,\r\n  props,\r\n  instanceId,\r\n}: {\r\n  file: UTUIFile;\r\n  props: UploadButtonProps;\r\n  instanceId: string;\r\n}) {\r\n  // [1]. States, Refs, Hooks, etc.\r\n  const { endpoint, ...restProps } = props;\r\n\r\n  const fileUploadRef = useRef(false);\r\n\r\n  // Used to create an abort controller\r\n  const abortControllerRef = useRef<AbortController | null>(\r\n    new AbortController()\r\n  );\r\n\r\n  const { removeFiles, updateFile, getFiles } = useFileStorageStore();\r\n\r\n  // Used to start the upload\r\n  const { startUpload } = useUploadThing(endpoint, {\r\n    ...restProps,\r\n    // Set the upload progress granularity to \"fine\" if not provided\r\n    uploadProgressGranularity: restProps.uploadProgressGranularity ?? \"fine\",\r\n    signal: abortControllerRef.current?.signal,\r\n    onUploadError: (error) => {\r\n      // Run the onUploadError prop if provided\r\n      restProps.onUploadError?.(error);\r\n\r\n      // Update the file status to \"error\" and set the error message\r\n      updateFile(instanceId, {\r\n        ...file,\r\n        status: \"error\",\r\n        error: error.message,\r\n      });\r\n      throw new Error(error.message);\r\n    },\r\n    onBeforeUploadBegin: (files) => {\r\n      // Run the onUploadBegin prop if provided\r\n      restProps?.onUploadBegin?.(file.file.name);\r\n\r\n      // Update the file status to \"uploading\"\r\n      updateFile(instanceId, { ...file, status: \"uploading\" });\r\n\r\n      return files;\r\n    },\r\n\r\n    onClientUploadComplete: (res) => {\r\n      // Run the onClientUploadComplete prop if provided\r\n      restProps?.onClientUploadComplete?.(res);\r\n\r\n      // Update the file status to \"uploaded\"\r\n      updateFile(instanceId, { ...file, status: \"uploaded\" });\r\n    },\r\n  });\r\n\r\n  // [2]. Effects\r\n  // This effect will only then start the upload to avoid rerendering / reuploading the same files\r\n  useEffect(() => {\r\n    if (!fileUploadRef.current && file.status === \"not started\") {\r\n      // Set the file upload ref to true to avoid reuploading the same file\r\n      fileUploadRef.current = true;\r\n\r\n      // Start the upload\r\n      const fileUploadPromise = startUpload([file.file]);\r\n\r\n      // Render the toast\r\n      toast.promise(fileUploadPromise, {\r\n        loading: (\r\n          <div className=\"flex flex-col\">\r\n            <p>Uploading</p>\r\n            <p>\r\n              {truncateFileName(file.file.name)} (\r\n              {getFileSizeFormatted(file.file.size)})\r\n            </p>\r\n          </div>\r\n        ),\r\n        success: () => {\r\n          // Remove the file from the state to avoid reuploading the same file\r\n          removeFiles(instanceId, file.id);\r\n\r\n          return {\r\n            message: `Uploaded`,\r\n            description: `${truncateFileName(\r\n              file.file.name\r\n            )} - (${getFileSizeFormatted(file.file.size)})`,\r\n          };\r\n        },\r\n        error: () => {\r\n          const currentFile = getFiles(instanceId).find(\r\n            (f) => f.id === file.id\r\n          );\r\n\r\n          // Remove the file from the state to avoid reuploading the same file\r\n          removeFiles(instanceId, file.id);\r\n\r\n          return {\r\n            message: `${\r\n              currentFile?.error\r\n                ? truncateFileName(currentFile.error, 32)\r\n                : \"Failed to upload\"\r\n            }`,\r\n            description: `${truncateFileName(\r\n              file.file.name\r\n            )} - (${getFileSizeFormatted(file.file.size)})`,\r\n          };\r\n        },\r\n        action: {\r\n          // If the file is still uploading then show the cancel button, otherwise show the close button\r\n          label: `Close`,\r\n          onClick: () => {\r\n            // Remove the file and abort the upload\r\n            abortControllerRef.current?.abort();\r\n            removeFiles(instanceId, file.id);\r\n          },\r\n        },\r\n      });\r\n    }\r\n  }, [file]);\r\n\r\n  // Returning null because the toast is rendered by the useUploadThing hook\r\n  return null;\r\n}\r\n\r\n/**\r\n * @description A component that displays the details of the upload files.\r\n * @param {UTUIFile} file - The file to upload.\r\n * @param {string} instanceId - The instance ID for the upload. Required to avoid multiple instances of the same component if multiple upload buttons are used.\r\n */\r\nfunction DropzoneFileDetails({\r\n  file,\r\n  instanceId,\r\n}: {\r\n  file: UTUIFile;\r\n  instanceId: string;\r\n}) {\r\n  // [1]. States, Refs, Hooks, etc.\r\n  const { removeFiles } = useFileStorageStore();\r\n\r\n  // [2]. Handlers\r\n  // Used to remove the file from the state\r\n  function removeFileOnClick() {\r\n    removeFiles(instanceId, file.id);\r\n  }\r\n\r\n  // [3]. JSX\r\n  return (\r\n    <div className=\"flex overflow-hidden border-b-2 items-center relative gap-4 h-fit sm:text-left text-center w-full px-4 py-4\">\r\n      <File className=\"w-6 h-6 absolute top-1/2 left-2 -translate-y-1/2\" />\r\n      <Tooltip>\r\n        <TooltipTrigger>\r\n          <p className=\"text-xs w-full truncate line-clamp-1 overflow-hidden px-6\">\r\n            {truncateFileName(file.file.name, 40)}\r\n          </p>\r\n        </TooltipTrigger>\r\n        <TooltipContent>\r\n          <p>{file.file.name}</p>\r\n        </TooltipContent>\r\n      </Tooltip>\r\n      <div className=\"z-50 absolute top-1/2 right-0 -translate-y-1/2 flex items-center justify-center bg-background h-full\">\r\n        <X\r\n          className=\"cursor-pointer w-6 h-6 text-primary\"\r\n          onClick={removeFileOnClick}\r\n        />\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n",
      "type": "registry:block",
      "target": "components/uploadthingui/dropzone-dialog.tsx"
    },
    {
      "path": "hooks/use-media-query.tsx",
      "content": "import * as React from \"react\";\r\n\r\n/**\r\n * @description A hook that returns the value of a media query.\r\n * @param {string} query - The media query to check.\r\n * @returns {boolean} The value of the media query.\r\n */\r\nexport function useMediaQuery(query: string) {\r\n  const [value, setValue] = React.useState(false);\r\n\r\n  React.useEffect(() => {\r\n    function onChange(event: MediaQueryListEvent) {\r\n      setValue(event.matches);\r\n    }\r\n\r\n    const result = matchMedia(query);\r\n    result.addEventListener(\"change\", onChange);\r\n    setValue(result.matches);\r\n\r\n    return () => result.removeEventListener(\"change\", onChange);\r\n  }, [query]);\r\n\r\n  return value;\r\n}\r\n",
      "type": "registry:hook",
      "target": "hooks/use-media-query.tsx"
    },
    {
      "path": "stores/main.ts",
      "content": "import { toast } from \"sonner\";\r\nimport { create } from \"zustand\";\r\n\r\nexport type UTUIFile = {\r\n  file: File;\r\n  id: string;\r\n  status: \"uploading\" | \"uploaded\" | \"not started\" | \"error\";\r\n  error?: string;\r\n  createdAt: Date;\r\n};\r\n\r\ntype additionalDetails = {\r\n  maxFileCount?: number;\r\n  minFileCount?: number;\r\n};\r\n\r\ninterface FileStorageState {\r\n  instances: Record<string, UTUIFile[]>;\r\n  addFiles: (\r\n    instanceId: string,\r\n    files: UTUIFile[],\r\n    additionalDetails: additionalDetails\r\n  ) => void;\r\n  removeFiles: (instanceId: string, fileId: string) => void;\r\n  updateFile: (instanceId: string, file: UTUIFile) => void;\r\n  getFiles: (instanceId: string) => UTUIFile[];\r\n}\r\n\r\nconst defaultFileStorageState = {\r\n  instances: {},\r\n};\r\n\r\nexport const useFileStorageStore = create<FileStorageState>()((set, get) => ({\r\n  ...defaultFileStorageState,\r\n  // Takes an array of files and add them to the state for a specific instance\r\n  addFiles: (\r\n    instanceId: string,\r\n    files: UTUIFile[],\r\n    additionalDetails: additionalDetails\r\n  ) => {\r\n    if (\r\n      additionalDetails.maxFileCount &&\r\n      get().getFiles(instanceId).length + files.length >\r\n        additionalDetails.maxFileCount\r\n    ) {\r\n      toast.error(`Failed to upload!`, {\r\n        description: `Max file count of ${additionalDetails.maxFileCount} exceeded.`,\r\n        action: {\r\n          label: `Close`,\r\n          onClick: () => toast.dismiss(),\r\n        },\r\n      });\r\n      return;\r\n    }\r\n\r\n    if (\r\n      additionalDetails.minFileCount &&\r\n      get().getFiles(instanceId).length + files.length <\r\n        additionalDetails.minFileCount\r\n    ) {\r\n      toast.error(`Failed to upload!`, {\r\n        description: `Required to upload at least ${additionalDetails.minFileCount} files.`,\r\n        action: {\r\n          label: `Close`,\r\n          onClick: () => toast.dismiss(),\r\n        },\r\n      });\r\n      return;\r\n    }\r\n    return set((state) => ({\r\n      instances: {\r\n        ...state.instances,\r\n        [instanceId]: [...(state.instances[instanceId] || []), ...files],\r\n      },\r\n    }));\r\n  },\r\n  // Takes an array of files and remove them from the state for a specific instance\r\n  removeFiles: (instanceId: string, fileId: string) => {\r\n    return set((state) => ({\r\n      instances: {\r\n        ...state.instances,\r\n        [instanceId]: (state.instances[instanceId] || []).filter(\r\n          (file) => file.id !== fileId\r\n        ),\r\n      },\r\n    }));\r\n  },\r\n  updateFile: (instanceId: string, file: UTUIFile) =>\r\n    set((state) => ({\r\n      instances: {\r\n        ...state.instances,\r\n        [instanceId]: (state.instances[instanceId] || []).map((f) =>\r\n          f.id === file.id ? file : f\r\n        ),\r\n      },\r\n    })),\r\n  getFiles: (instanceId: string) => get().instances[instanceId] || [],\r\n}));\r\n",
      "type": "registry:lib",
      "target": "stores/main.ts"
    },
    {
      "path": "lib/uploadthingui-utils.ts",
      "content": "import { ExpandedRouteConfig, FileRouterInputKey } from \"@uploadthing/shared\";\r\n\r\nexport function getFileSizeFormatted(size: number) {\r\n  if (size < 1024) return `${size} B`;\r\n  if (size < 1024 * 1024) return `${(size / 1024).toFixed(0)} KB`;\r\n  if (size < 1024 * 1024 * 1024) return `${(size / 1024 / 1024).toFixed(1)} MB`;\r\n  return `${(size / 1024 / 1024 / 1024).toFixed(2)} GB`;\r\n}\r\n\r\n// Return the objects value\r\nexport function checkFileObjectKey({\r\n  str,\r\n  obj,\r\n}: {\r\n  str: FileRouterInputKey | undefined;\r\n  obj: ExpandedRouteConfig | undefined;\r\n}) {\r\n  if (!str || !obj) return null;\r\n\r\n  if (obj && typeof obj === \"object\" && obj.hasOwnProperty(str)) {\r\n    return obj[str];\r\n  } else {\r\n    return null;\r\n  }\r\n}\r\n\r\n/**\r\n * @description A utility function that truncates the file name to a maximum number of characters.\r\n * @param {string} fileName - The file name to truncate.\r\n * @param {number} maxChars - The maximum number of characters to truncate the file name to. Default is 24.\r\n * @returns {string} The truncated file name.\r\n */\r\nexport function truncateFileName(fileName: string, maxChars?: number) {\r\n  if (fileName.length > 20) {\r\n    return `${fileName.slice(0, maxChars ?? 24)}...`;\r\n  }\r\n  return fileName;\r\n}\r\n",
      "type": "registry:lib",
      "target": "lib/uploadthingui-utils.ts"
    },
    {
      "path": "lib/uploadthing.ts",
      "content": "import {\r\n  generateUploadButton,\r\n  generateUploadDropzone,\r\n  generateReactHelpers,\r\n} from \"@uploadthing/react\";\r\n\r\nimport { OurFileRouter } from \"@/app/api/uploadthing/core\";\r\n\r\nexport const UploadButton = generateUploadButton<OurFileRouter>();\r\nexport const UploadDropzone = generateUploadDropzone<OurFileRouter>();\r\nexport const { useUploadThing, uploadFiles } =\r\n  generateReactHelpers<OurFileRouter>();\r\n",
      "type": "registry:lib",
      "target": "lib/uploadthing.ts"
    },
    {
      "path": "registry/new-york/common/button-details/button-details.tsx",
      "content": "/**\r\n * @description A component that displays the details of the upload button.\r\n * @param {string} acceptedFileTypes - The accepted file types.\r\n * @param {number} maxFileCount - The maximum number of files that can be uploaded.\r\n * @param {string} maxFileSize - The maximum file size that can be uploaded.\r\n */\r\nexport default function ButtonDetails({\r\n  acceptedFileTypes,\r\n  maxFileCount,\r\n  maxFileSize,\r\n  minFileCount,\r\n}: {\r\n  acceptedFileTypes: string;\r\n  maxFileCount: number;\r\n  maxFileSize: string;\r\n  minFileCount: number;\r\n}) {\r\n  // [1]. JSX\r\n  return (\r\n    <div className=\"flex gap-2 flex-wrap items-center justify-center text-sm\">\r\n      <span className=\"text-center\">Allowed type: {acceptedFileTypes}</span>\r\n      <span className=\"text-center\">\r\n        Atleast {minFileCount > 1 ? minFileCount : 1} file(s)\r\n      </span>\r\n      {maxFileCount > 0 && (\r\n        <span className=\"text-center\">Atmost {maxFileCount} file(s)</span>\r\n      )}\r\n      <span className=\"text-center\">Up to {maxFileSize} each</span>\r\n    </div>\r\n  );\r\n}\r\n",
      "type": "registry:component",
      "target": "components/uploadthingui/common/button-details.tsx"
    },
    {
      "path": "registry\\new-york\\dropzone-dialog\\dropzone-dialog.tsx",
      "content": "\"use client\";\r\n\r\nimport { Button } from \"@/components/ui/button\";\r\nimport {\r\n  Dialog,\r\n  DialogContent,\r\n  DialogDescription,\r\n  DialogFooter,\r\n  DialogHeader,\r\n  DialogTitle,\r\n  DialogTrigger,\r\n} from \"@/components/ui/dialog\";\r\nimport {\r\n  Drawer,\r\n  DrawerContent,\r\n  DrawerDescription,\r\n  DrawerFooter,\r\n  DrawerHeader,\r\n  DrawerTitle,\r\n  DrawerTrigger,\r\n} from \"@/components/ui/drawer\";\r\nimport {\r\n  Tooltip,\r\n  TooltipContent,\r\n  TooltipTrigger,\r\n} from \"@/components/ui/tooltip\";\r\nimport ButtonDetails from \"@/components/uploadthingui/common/button-details\";\r\nimport { useMediaQuery } from \"@/hooks/use-media-query\";\r\nimport { UploadButton, useUploadThing } from \"@/lib/uploadthing\";\r\nimport {\r\n  checkFileObjectKey,\r\n  getFileSizeFormatted,\r\n  truncateFileName,\r\n} from \"@/lib/uploadthingui-utils\";\r\nimport { cn } from \"@/lib/utils\";\r\nimport { useFileStorageStore, UTUIFile } from \"@/stores/main\";\r\nimport { createId } from \"@paralleldrive/cuid2\";\r\nimport { useDropzone } from \"@uploadthing/react\";\r\nimport {\r\n  generateClientDropzoneAccept,\r\n  generatePermittedFileTypes,\r\n} from \"@uploadthing/shared\";\r\nimport { File, Upload, UploadCloud, X } from \"lucide-react\";\r\nimport {\r\n  cloneElement,\r\n  isValidElement,\r\n  useCallback,\r\n  useEffect,\r\n  useRef,\r\n  useState,\r\n  type ComponentProps,\r\n} from \"react\";\r\nimport { toast } from \"sonner\";\r\n\r\n// Get the props type directly from UploadButton\r\ntype UploadButtonProps = ComponentProps<typeof UploadButton>;\r\n\r\n/**\r\n * @description An upload button component which opens up a dialog with a dropzone and uses toasts as its response method.\r\n * @param {UploadButtonProps} props - The props for the UploadButton component.\r\n * @param {boolean} showDetails - Whether to show the details of the upload.\r\n * @param {string} instanceId - The instance ID for the upload. Required to avoid multiple instances of the same component if multiple upload buttons are used.\r\n * @param {boolean} allowInBetweenUploads - Whether to allow in between uploads.\r\n * @param {routeDetails} routeDetails - Additional details for the upload; Example: maxFileCount, minFileCount, etc.\r\n * @param {React.ReactNode} children - React node to render a custom button component.\r\n */\r\nexport default function DropzoneDialog({\r\n  props,\r\n  showDetails = true,\r\n  instanceId,\r\n  allowInBetweenUploads = true,\r\n  routeDetails,\r\n  children,\r\n}: {\r\n  props: UploadButtonProps;\r\n  showDetails?: boolean;\r\n  instanceId: string;\r\n  allowInBetweenUploads?: boolean;\r\n  routeDetails?: {\r\n    maxFileCount?: number;\r\n    minFileCount?: number;\r\n  };\r\n  children?: React.ReactNode;\r\n}) {\r\n  // [1]. States, Refs, Hooks, etc.\r\n  const { endpoint, ...restProps } = props;\r\n  const isDesktop = useMediaQuery(\"(min-width: 768px)\");\r\n\r\n  const [open, setOpen] = useState(false);\r\n\r\n  // Used to start the combined upload\r\n  const [startUpload, setStartUpload] = useState(false);\r\n\r\n  const { getFiles, addFiles, removeFiles } = useFileStorageStore();\r\n\r\n  const files = getFiles(instanceId);\r\n  const filesNotStarted = files.filter((file) => file.status === \"not started\");\r\n  const { routeConfig } = useUploadThing(endpoint, {\r\n    ...restProps,\r\n  });\r\n\r\n  const canUpload =\r\n    allowInBetweenUploads ||\r\n    files.filter((file) => file.status === \"uploading\").length === 0;\r\n\r\n  // Used to generate the accepted file types\r\n  const acceptedFileTypes = generatePermittedFileTypes(routeConfig)\r\n    .fileTypes.map((fileType) => {\r\n      if (fileType.includes(\"/\")) {\r\n        return fileType;\r\n      } else {\r\n        return `${fileType}/*`;\r\n      }\r\n    })\r\n    .join(\",\");\r\n\r\n  // Used to check the file route options\r\n  const fileRouteOptions = checkFileObjectKey({\r\n    str: generatePermittedFileTypes(routeConfig).fileTypes[0],\r\n    obj: routeConfig,\r\n  });\r\n\r\n  // If the file route options are not found then return\r\n  if (!fileRouteOptions) return;\r\n\r\n  // [2]. Handlers\r\n  // Used to handle the dropzone drop event\r\n  const onDrop = useCallback(\r\n    (acceptedFiles: File[]) => {\r\n      // Set the start upload state to false to avoid reuploading the same files\r\n      setStartUpload(false);\r\n\r\n      // At this moment, the files are not uploaded, so we set the status to \"not started\"\r\n      addFiles(\r\n        instanceId,\r\n        acceptedFiles.map((file) => ({\r\n          id: createId(),\r\n          file,\r\n          status: \"not started\",\r\n          createdAt: new Date(),\r\n        })),\r\n        routeDetails ?? {}\r\n      );\r\n    },\r\n    [addFiles, instanceId, routeDetails]\r\n  );\r\n\r\n  // Used to get the dropzone props\r\n  const { getRootProps, getInputProps } = useDropzone({\r\n    onDrop,\r\n    accept: generateClientDropzoneAccept(\r\n      generatePermittedFileTypes(routeConfig).fileTypes\r\n    ),\r\n    multiple:\r\n      routeDetails?.maxFileCount === undefined || routeDetails.maxFileCount > 1,\r\n    // Enforce the same limit at the dropzone level\r\n    maxFiles: routeDetails?.maxFileCount ?? undefined,\r\n  });\r\n\r\n  function uploadButtonClicked() {\r\n    if (!canUpload) return;\r\n\r\n    setStartUpload(true);\r\n\r\n    // Close the dialog\r\n    setOpen(false);\r\n  }\r\n\r\n  // [3]. JSX\r\n  if (isDesktop) {\r\n    return (\r\n      <>\r\n        <Dialog open={open} onOpenChange={setOpen}>\r\n          <DialogTrigger asChild>\r\n            <DropzoneDialogAndDrawerActionButton\r\n              onClick={() => setOpen(true)}\r\n              children={children}\r\n            />\r\n          </DialogTrigger>\r\n          <DialogContent>\r\n            <DialogHeader>\r\n              <DialogTitle>Upload Files</DialogTitle>\r\n              <DialogDescription asChild>\r\n                <div className=\"overflow-hidden py-4 flex-col rounded-md flex items-center justify-center relative\">\r\n                  {/* Dropzone */}\r\n                  <div\r\n                    className=\"absolute top-0 left-0 w-full h-full\"\r\n                    {...getRootProps()}\r\n                  ></div>\r\n                  {/* Hidden input to allow selection of files */}\r\n                  <input {...getInputProps()} />\r\n                  {filesNotStarted.length > 0 ? (\r\n                    <div className=\"w-full border rounded-md overflow-hidden border-dashed px-4 py-8\">\r\n                      <div className=\"w-full px-4 md:px-16\">\r\n                        {filesNotStarted.map((file) => (\r\n                          <DropzoneFileDetails\r\n                            key={file.id}\r\n                            file={file}\r\n                            instanceId={instanceId}\r\n                          />\r\n                        ))}\r\n                      </div>\r\n                    </div>\r\n                  ) : (\r\n                    <div className=\"border w-full py-4 rounded-md border-dashed flex items-center justify-center flex-col gap-4\">\r\n                      <UploadCloud className=\"w-12 h-12\" />\r\n                      <p className=\"text-sm text-primary\">\r\n                        Choose files or drag and drop\r\n                      </p>\r\n                      {showDetails && (\r\n                        <ButtonDetails\r\n                          acceptedFileTypes={acceptedFileTypes}\r\n                          maxFileCount={routeDetails?.maxFileCount ?? 0}\r\n                          minFileCount={routeDetails?.minFileCount ?? 0}\r\n                          maxFileSize={fileRouteOptions.maxFileSize}\r\n                        />\r\n                      )}\r\n                    </div>\r\n                  )}\r\n                </div>\r\n              </DialogDescription>\r\n            </DialogHeader>\r\n\r\n            <DialogFooter>\r\n              <DropzoneDialogAndDrawerActionButton\r\n                onClick={uploadButtonClicked}\r\n                children={children}\r\n                className=\"w-full\"\r\n                disabled={!canUpload}\r\n              />\r\n            </DialogFooter>\r\n          </DialogContent>\r\n        </Dialog>\r\n        {/* Uploading toasts */}\r\n        {startUpload &&\r\n          files.map((file) => (\r\n            <UploadingToast\r\n              key={file.id}\r\n              file={file}\r\n              props={props}\r\n              instanceId={instanceId}\r\n            />\r\n          ))}\r\n      </>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <Drawer open={open} onOpenChange={setOpen}>\r\n        <DrawerTrigger asChild>\r\n          <DropzoneDialogAndDrawerActionButton\r\n            onClick={() => setOpen(true)}\r\n            children={children}\r\n          />\r\n        </DrawerTrigger>\r\n        <DrawerContent>\r\n          {/* For sm reason only max-h accepts only 75vh. Nothing else works  */}\r\n          {/* Don't change this to overflow-y-auto or overflow-y-scroll */}\r\n          <DrawerHeader className=\"overflow-y-scroll max-h-[75vh]\">\r\n            <DrawerTitle asChild>\r\n              <div className=\"relative\">\r\n                <p className=\"\">Upload Files</p>\r\n\r\n                {/* Copied from shadcn/ui/dialog.tsx */}\r\n                <div className=\"absolute right-0 top-0 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\r\n                  <div className=\"rounded-sm text-xs border py-1 px-2 hover:bg-muted\">\r\n                    Esc\r\n                  </div>\r\n                  <span className=\"sr-only\">Close</span>\r\n                </div>\r\n              </div>\r\n            </DrawerTitle>\r\n            <DrawerDescription asChild>\r\n              <div className=\"relative max-h-[50%] overflow-hidden py-4\">\r\n                {/* Dropzone */}\r\n                <div\r\n                  className=\"absolute top-0 left-0 w-full h-full\"\r\n                  {...getRootProps()}\r\n                ></div>\r\n                {/* Hidden input to allow selection of files */}\r\n                <input {...getInputProps()} />\r\n                {filesNotStarted.length > 0 ? (\r\n                  <div className=\"w-full border rounded-md overflow-hidden border-dashed px-4 py-8\">\r\n                    <div className=\"w-full px-4 md:px-16\">\r\n                      {filesNotStarted.map((file) => (\r\n                        <DropzoneFileDetails\r\n                          key={file.id}\r\n                          file={file}\r\n                          instanceId={instanceId}\r\n                        />\r\n                      ))}\r\n                    </div>\r\n                  </div>\r\n                ) : (\r\n                  <div className=\"border w-full py-4 rounded-md border-dashed flex items-center justify-center flex-col gap-4\">\r\n                    <UploadCloud className=\"w-12 h-12\" />\r\n                    <p className=\"text-sm text-primary\">\r\n                      Choose files or drag and drop\r\n                    </p>\r\n                    {showDetails && (\r\n                      <ButtonDetails\r\n                        acceptedFileTypes={acceptedFileTypes}\r\n                        maxFileCount={routeDetails?.maxFileCount ?? 0}\r\n                        minFileCount={routeDetails?.minFileCount ?? 0}\r\n                        maxFileSize={fileRouteOptions.maxFileSize}\r\n                      />\r\n                    )}\r\n                  </div>\r\n                )}\r\n              </div>\r\n            </DrawerDescription>\r\n          </DrawerHeader>\r\n          <DrawerFooter>\r\n            <DropzoneDialogAndDrawerActionButton\r\n              onClick={uploadButtonClicked}\r\n              children={children}\r\n              className=\"w-full\"\r\n              disabled={!canUpload}\r\n            />\r\n          </DrawerFooter>\r\n        </DrawerContent>\r\n      </Drawer>\r\n      {/* Uploading toasts */}\r\n      {startUpload &&\r\n        files.map((file) => (\r\n          <UploadingToast\r\n            key={file.id}\r\n            file={file}\r\n            props={props}\r\n            instanceId={instanceId}\r\n          />\r\n        ))}\r\n    </>\r\n  );\r\n}\r\n\r\n/**\r\n * @description A component that renders a button for the dropzone dialog and drawer.\r\n * @param {React.ReactNode} children - The children to render.\r\n * @param {() => void} onClick - The onClick handler.\r\n */\r\nfunction DropzoneDialogAndDrawerActionButton({\r\n  onClick,\r\n  className,\r\n  children,\r\n  disabled,\r\n}: {\r\n  onClick: () => void;\r\n  className?: string;\r\n  children?: React.ReactNode;\r\n  disabled?: boolean;\r\n}) {\r\n  // /* If a custom button has returned then render that and attach the onClick handler to it\r\n  if (children && isValidElement(children)) {\r\n    return cloneElement(children as React.ReactElement, {\r\n      onClick,\r\n      disabled,\r\n    }) as React.ReactElement;\r\n  }\r\n\r\n  return (\r\n    <Button\r\n      className={cn(\"w-fit\", className)}\r\n      onClick={onClick}\r\n      disabled={disabled}\r\n    >\r\n      <Upload className=\"w-4 h-4\" />\r\n      <span className=\"ml-2\">Upload</span>\r\n    </Button>\r\n  );\r\n}\r\n\r\n/**\r\n * @description A component that displays the uploading toast.\r\n * @param {UTUIFile} file - The file to upload.\r\n * @param {UploadButtonProps} props - The props for the UploadButton component.\r\n * @param {string} instanceId - The instance ID for the upload. Required to avoid multiple instances of the same component if multiple upload buttons are used.\r\n */\r\nfunction UploadingToast({\r\n  file,\r\n  props,\r\n  instanceId,\r\n}: {\r\n  file: UTUIFile;\r\n  props: UploadButtonProps;\r\n  instanceId: string;\r\n}) {\r\n  // [1]. States, Refs, Hooks, etc.\r\n  const { endpoint, ...restProps } = props;\r\n\r\n  const fileUploadRef = useRef(false);\r\n\r\n  // Used to create an abort controller\r\n  const abortControllerRef = useRef<AbortController | null>(\r\n    new AbortController()\r\n  );\r\n\r\n  const { removeFiles, updateFile, getFiles } = useFileStorageStore();\r\n\r\n  // Used to start the upload\r\n  const { startUpload } = useUploadThing(endpoint, {\r\n    ...restProps,\r\n    // Set the upload progress granularity to \"fine\" if not provided\r\n    uploadProgressGranularity: restProps.uploadProgressGranularity ?? \"fine\",\r\n    signal: abortControllerRef.current?.signal,\r\n    onUploadError: (error) => {\r\n      // Run the onUploadError prop if provided\r\n      restProps.onUploadError?.(error);\r\n\r\n      // Update the file status to \"error\" and set the error message\r\n      updateFile(instanceId, {\r\n        ...file,\r\n        status: \"error\",\r\n        error: error.message,\r\n      });\r\n      throw new Error(error.message);\r\n    },\r\n    onBeforeUploadBegin: (files) => {\r\n      // Run the onUploadBegin prop if provided\r\n      restProps?.onUploadBegin?.(file.file.name);\r\n\r\n      // Update the file status to \"uploading\"\r\n      updateFile(instanceId, { ...file, status: \"uploading\" });\r\n\r\n      return files;\r\n    },\r\n\r\n    onClientUploadComplete: (res) => {\r\n      // Run the onClientUploadComplete prop if provided\r\n      restProps?.onClientUploadComplete?.(res);\r\n\r\n      // Update the file status to \"uploaded\"\r\n      updateFile(instanceId, { ...file, status: \"uploaded\" });\r\n    },\r\n  });\r\n\r\n  // [2]. Effects\r\n  // This effect will only then start the upload to avoid rerendering / reuploading the same files\r\n  useEffect(() => {\r\n    if (!fileUploadRef.current && file.status === \"not started\") {\r\n      // Set the file upload ref to true to avoid reuploading the same file\r\n      fileUploadRef.current = true;\r\n\r\n      // Start the upload\r\n      const fileUploadPromise = startUpload([file.file]);\r\n\r\n      // Render the toast\r\n      toast.promise(fileUploadPromise, {\r\n        loading: (\r\n          <div className=\"flex flex-col\">\r\n            <p>Uploading</p>\r\n            <p>\r\n              {truncateFileName(file.file.name)} (\r\n              {getFileSizeFormatted(file.file.size)})\r\n            </p>\r\n          </div>\r\n        ),\r\n        success: () => {\r\n          // Remove the file from the state to avoid reuploading the same file\r\n          removeFiles(instanceId, file.id);\r\n\r\n          return {\r\n            message: `Uploaded`,\r\n            description: `${truncateFileName(\r\n              file.file.name\r\n            )} - (${getFileSizeFormatted(file.file.size)})`,\r\n          };\r\n        },\r\n        error: () => {\r\n          const currentFile = getFiles(instanceId).find(\r\n            (f) => f.id === file.id\r\n          );\r\n\r\n          // Remove the file from the state to avoid reuploading the same file\r\n          removeFiles(instanceId, file.id);\r\n\r\n          return {\r\n            message: `${\r\n              currentFile?.error\r\n                ? truncateFileName(currentFile.error, 32)\r\n                : \"Failed to upload\"\r\n            }`,\r\n            description: `${truncateFileName(\r\n              file.file.name\r\n            )} - (${getFileSizeFormatted(file.file.size)})`,\r\n          };\r\n        },\r\n        action: {\r\n          // If the file is still uploading then show the cancel button, otherwise show the close button\r\n          label: `Close`,\r\n          onClick: () => {\r\n            // Remove the file and abort the upload\r\n            abortControllerRef.current?.abort();\r\n            removeFiles(instanceId, file.id);\r\n          },\r\n        },\r\n      });\r\n    }\r\n  }, [file]);\r\n\r\n  // Returning null because the toast is rendered by the useUploadThing hook\r\n  return null;\r\n}\r\n\r\n/**\r\n * @description A component that displays the details of the upload files.\r\n * @param {UTUIFile} file - The file to upload.\r\n * @param {string} instanceId - The instance ID for the upload. Required to avoid multiple instances of the same component if multiple upload buttons are used.\r\n */\r\nfunction DropzoneFileDetails({\r\n  file,\r\n  instanceId,\r\n}: {\r\n  file: UTUIFile;\r\n  instanceId: string;\r\n}) {\r\n  // [1]. States, Refs, Hooks, etc.\r\n  const { removeFiles } = useFileStorageStore();\r\n\r\n  // [2]. Handlers\r\n  // Used to remove the file from the state\r\n  function removeFileOnClick() {\r\n    removeFiles(instanceId, file.id);\r\n  }\r\n\r\n  // [3]. JSX\r\n  return (\r\n    <div className=\"flex overflow-hidden border-b-2 items-center relative gap-4 h-fit sm:text-left text-center w-full px-4 py-4\">\r\n      <File className=\"w-6 h-6 absolute top-1/2 left-2 -translate-y-1/2\" />\r\n      <Tooltip>\r\n        <TooltipTrigger>\r\n          <p className=\"text-xs w-full truncate line-clamp-1 overflow-hidden px-6\">\r\n            {truncateFileName(file.file.name, 40)}\r\n          </p>\r\n        </TooltipTrigger>\r\n        <TooltipContent>\r\n          <p>{file.file.name}</p>\r\n        </TooltipContent>\r\n      </Tooltip>\r\n      <div className=\"z-50 absolute top-1/2 right-0 -translate-y-1/2 flex items-center justify-center bg-background h-full\">\r\n        <X\r\n          className=\"cursor-pointer w-6 h-6 text-primary\"\r\n          onClick={removeFileOnClick}\r\n        />\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n",
      "type": "registry:component",
      "target": ""
    },
    {
      "path": "components\\ui\\button.tsx",
      "content": "import * as React from \"react\";\nimport { Slot } from \"@radix-ui/react-slot\";\nimport { cva, type VariantProps } from \"class-variance-authority\";\n\nimport { cn } from \"@/lib/utils\";\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-primary text-primary-foreground hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-destructive-foreground hover:bg-destructive/90\",\n        outline:\n          \"border border-input bg-background hover:bg-accent hover:text-accent-foreground\",\n        secondary:\n          \"bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-10 px-4 py-2\",\n        sm: \"h-9 rounded-md px-3\",\n        lg: \"h-11 rounded-md px-8\",\n        icon: \"h-9 w-9\",\n        xs: \"h-7 rounded-md px-2\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n);\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean;\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\";\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    );\n  }\n);\nButton.displayName = \"Button\";\n\nexport { Button, buttonVariants };\n",
      "type": "registry:ui",
      "target": ""
    },
    {
      "path": "lib\\utils.ts",
      "content": "import { clsx, type ClassValue } from \"clsx\";\nimport { twMerge } from \"tailwind-merge\";\nimport { EachRoute, ROUTES } from \"./routes-config\";\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs));\n}\n\nexport function helperSearch(\n  query: string,\n  node: EachRoute,\n  prefix: string,\n  currenLevel: number,\n  maxLevel?: number\n) {\n  const res: EachRoute[] = [];\n  let parentHas = false;\n\n  const nextLink = `${prefix}${node.href}`;\n  if (!node.noLink && node.title.toLowerCase().includes(query.toLowerCase())) {\n    res.push({ ...node, items: undefined, href: nextLink });\n    parentHas = true;\n  }\n  const goNext = maxLevel ? currenLevel < maxLevel : true;\n  if (goNext) {\n    node.items?.forEach((item) => {\n      const innerRes = helperSearch(\n        query,\n        item,\n        nextLink,\n        currenLevel + 1,\n        maxLevel\n      );\n      if (!!innerRes.length && !parentHas && !node.noLink) {\n        res.push({ ...node, items: undefined, href: nextLink });\n        parentHas = true;\n      }\n      res.push(...innerRes);\n    });\n  }\n  return res;\n}\n\nexport function advanceSearch(query: string) {\n  return ROUTES.map((node) =>\n    helperSearch(query, node, \"\", 1, query.length == 0 ? 2 : undefined)\n  ).flat();\n}\n\n// Thursday, May 23, 2024\nexport function formatDate(dateStr: string): string {\n  const [day, month, year] = dateStr.split(\"-\").map(Number);\n  const date = new Date(year, month - 1, day);\n\n  const options: Intl.DateTimeFormatOptions = {\n    weekday: \"long\",\n    year: \"numeric\",\n    month: \"long\",\n    day: \"numeric\",\n  };\n\n  return date.toLocaleDateString(\"en-US\", options);\n}\n\n//  May 23, 2024\nexport function formatDate2(dateStr: string): string {\n  const [day, month, year] = dateStr.split(\"-\").map(Number);\n  const date = new Date(year, month - 1, day);\n\n  const options: Intl.DateTimeFormatOptions = {\n    month: \"short\",\n    day: \"numeric\",\n    year: \"numeric\",\n  };\n  return date.toLocaleDateString(\"en-US\", options);\n}\n\nexport function stringToDate(date: string) {\n  const [day, month, year] = date.split(\"-\").map(Number);\n  return new Date(year, month - 1, day);\n}\n\n// https://devicon.dev/\n//  icon format : <i class=\"devicon-go-plain\"></i>\nexport const fileExtensionIconMap = {\n  js: \"javascript\",\n  ts: \"typescript\",\n  jsx: \"react\",\n  tsx: \"react\",\n  java: \"java\",\n  css: \"css3\",\n  md: \"markdown\",\n  mdx: \"markdown\",\n  go: \"go\",\n  astro: \"astro\",\n  prisma: \"prisma\",\n  py: \"python\",\n  kt: \"kotlin\",\n  php: \"php\",\n  gitignore: \"git\",\n  cs: \"csharp\",\n  cpp: \"cplusplus\",\n  c: \"c\",\n  bash: \"bash\",\n  html: \"html5\",\n};\n\nexport function hasSupportedExtension(name: string) {\n  const splittedNames = name.split(\".\");\n  const ext = splittedNames[splittedNames.length - 1];\n  if (!ext) return false;\n  return !!fileExtensionIconMap[ext as keyof typeof fileExtensionIconMap];\n}\n\nexport function getIconName(name: string) {\n  const splittedNames = name.split(\".\");\n  const ext = splittedNames[splittedNames.length - 1];\n  return fileExtensionIconMap[ext as keyof typeof fileExtensionIconMap];\n}\n",
      "type": "registry:lib",
      "target": ""
    },
    {
      "path": "components\\ui\\dialog.tsx",
      "content": "\"use client\";\r\n\r\nimport * as React from \"react\";\r\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\";\r\n\r\nimport { cn } from \"@/lib/utils\";\r\n\r\nconst Dialog = DialogPrimitive.Root;\r\n\r\nconst DialogTrigger = DialogPrimitive.Trigger;\r\n\r\nconst DialogPortal = DialogPrimitive.Portal;\r\n\r\nconst DialogClose = DialogPrimitive.Close;\r\n\r\nconst DialogOverlay = React.forwardRef<\r\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\r\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\r\n>(({ className, ...props }, ref) => (\r\n  <DialogPrimitive.Overlay\r\n    ref={ref}\r\n    className={cn(\r\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\r\n      className\r\n    )}\r\n    {...props}\r\n  />\r\n));\r\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName;\r\n\r\nconst DialogContent = React.forwardRef<\r\n  React.ElementRef<typeof DialogPrimitive.Content>,\r\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content> & {}\r\n>(({ className, children, ...props }, ref) => (\r\n  <DialogPortal>\r\n    <DialogOverlay />\r\n    <DialogPrimitive.Content\r\n      ref={ref}\r\n      className={cn(\r\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\r\n        // For sm reason only max-h accepts only 75vh. Nothing else works\r\n        // Don't change this to overflow-y-auto or overflow-y-scroll\r\n        \"overflow-y-scroll max-h-[75vh]\",\r\n        className\r\n      )}\r\n      {...props}\r\n    >\r\n      {children}\r\n      <DialogPrimitive.Close className=\"absolute right-6 top-3.5 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\r\n        {/* <X className=\"h-4 w-4\" /> */}\r\n        <div className=\"rounded-sm text-xs border py-1 px-2 hover:bg-muted\">\r\n          Esc\r\n        </div>\r\n        <span className=\"sr-only\">Close</span>\r\n      </DialogPrimitive.Close>\r\n    </DialogPrimitive.Content>\r\n  </DialogPortal>\r\n));\r\nDialogContent.displayName = DialogPrimitive.Content.displayName;\r\n\r\nconst DialogHeader = ({\r\n  className,\r\n  ...props\r\n}: React.HTMLAttributes<HTMLDivElement>) => (\r\n  <div\r\n    className={cn(\r\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\r\n      className\r\n    )}\r\n    {...props}\r\n  />\r\n);\r\nDialogHeader.displayName = \"DialogHeader\";\r\n\r\nconst DialogFooter = ({\r\n  className,\r\n  ...props\r\n}: React.HTMLAttributes<HTMLDivElement>) => (\r\n  <div\r\n    className={cn(\r\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\r\n      className\r\n    )}\r\n    {...props}\r\n  />\r\n);\r\nDialogFooter.displayName = \"DialogFooter\";\r\n\r\nconst DialogTitle = React.forwardRef<\r\n  React.ElementRef<typeof DialogPrimitive.Title>,\r\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\r\n>(({ className, ...props }, ref) => (\r\n  <DialogPrimitive.Title\r\n    ref={ref}\r\n    className={cn(\r\n      \"text-lg font-semibold leading-none tracking-tight\",\r\n      className\r\n    )}\r\n    {...props}\r\n  />\r\n));\r\nDialogTitle.displayName = DialogPrimitive.Title.displayName;\r\n\r\nconst DialogDescription = React.forwardRef<\r\n  React.ElementRef<typeof DialogPrimitive.Description>,\r\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\r\n>(({ className, ...props }, ref) => (\r\n  <DialogPrimitive.Description\r\n    ref={ref}\r\n    className={cn(\"text-sm text-muted-foreground\", className)}\r\n    {...props}\r\n  />\r\n));\r\nDialogDescription.displayName = DialogPrimitive.Description.displayName;\r\n\r\nexport {\r\n  Dialog,\r\n  DialogPortal,\r\n  DialogOverlay,\r\n  DialogClose,\r\n  DialogTrigger,\r\n  DialogContent,\r\n  DialogHeader,\r\n  DialogFooter,\r\n  DialogTitle,\r\n  DialogDescription,\r\n};\r\n",
      "type": "registry:ui",
      "target": ""
    },
    {
      "path": "components\\ui\\drawer.tsx",
      "content": "\"use client\";\r\n\r\nimport * as React from \"react\";\r\nimport { Drawer as DrawerPrimitive } from \"vaul\";\r\n\r\nimport { cn } from \"@/lib/utils\";\r\n\r\nconst Drawer = ({\r\n  shouldScaleBackground = true,\r\n  ...props\r\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\r\n  <DrawerPrimitive.Root\r\n    shouldScaleBackground={shouldScaleBackground}\r\n    {...props}\r\n  />\r\n);\r\nDrawer.displayName = \"Drawer\";\r\n\r\nconst DrawerTrigger = DrawerPrimitive.Trigger;\r\n\r\nconst DrawerPortal = DrawerPrimitive.Portal;\r\n\r\nconst DrawerClose = DrawerPrimitive.Close;\r\n\r\nconst DrawerOverlay = React.forwardRef<\r\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\r\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\r\n>(({ className, ...props }, ref) => (\r\n  <DrawerPrimitive.Overlay\r\n    ref={ref}\r\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\r\n    {...props}\r\n  />\r\n));\r\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName;\r\n\r\nconst DrawerContent = React.forwardRef<\r\n  React.ElementRef<typeof DrawerPrimitive.Content>,\r\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\r\n>(({ className, children, ...props }, ref) => (\r\n  <DrawerPortal>\r\n    <DrawerOverlay />\r\n    <DrawerPrimitive.Content\r\n      ref={ref}\r\n      className={cn(\r\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\r\n        className\r\n      )}\r\n      {...props}\r\n    >\r\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\r\n      {children}\r\n    </DrawerPrimitive.Content>\r\n  </DrawerPortal>\r\n));\r\nDrawerContent.displayName = \"DrawerContent\";\r\n\r\nconst DrawerHeader = ({\r\n  className,\r\n  ...props\r\n}: React.HTMLAttributes<HTMLDivElement>) => (\r\n  <div\r\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\r\n    {...props}\r\n  />\r\n);\r\nDrawerHeader.displayName = \"DrawerHeader\";\r\n\r\nconst DrawerFooter = ({\r\n  className,\r\n  ...props\r\n}: React.HTMLAttributes<HTMLDivElement>) => (\r\n  <div\r\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\r\n    {...props}\r\n  />\r\n);\r\nDrawerFooter.displayName = \"DrawerFooter\";\r\n\r\nconst DrawerTitle = React.forwardRef<\r\n  React.ElementRef<typeof DrawerPrimitive.Title>,\r\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\r\n>(({ className, ...props }, ref) => (\r\n  <DrawerPrimitive.Title\r\n    ref={ref}\r\n    className={cn(\r\n      \"text-lg font-semibold leading-none tracking-tight\",\r\n      className\r\n    )}\r\n    {...props}\r\n  />\r\n));\r\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName;\r\n\r\nconst DrawerDescription = React.forwardRef<\r\n  React.ElementRef<typeof DrawerPrimitive.Description>,\r\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\r\n>(({ className, ...props }, ref) => (\r\n  <DrawerPrimitive.Description\r\n    ref={ref}\r\n    className={cn(\"text-sm text-muted-foreground\", className)}\r\n    {...props}\r\n  />\r\n));\r\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName;\r\n\r\nexport {\r\n  Drawer,\r\n  DrawerPortal,\r\n  DrawerOverlay,\r\n  DrawerTrigger,\r\n  DrawerClose,\r\n  DrawerContent,\r\n  DrawerHeader,\r\n  DrawerFooter,\r\n  DrawerTitle,\r\n  DrawerDescription,\r\n};\r\n",
      "type": "registry:ui",
      "target": ""
    },
    {
      "path": "components\\ui\\tooltip.tsx",
      "content": "\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Portal>\n    <TooltipPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 overflow-hidden rounded-md bg-primary px-3 py-1.5 text-xs text-primary-foreground animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-tooltip-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </TooltipPrimitive.Portal>\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n",
      "type": "registry:ui",
      "target": ""
    },
    {
      "path": "components\\uploadthingui\\common\\button-details.tsx",
      "content": "import ButtonDetailsComponent from \"@/registry/new-york/common/button-details/button-details\";\r\n\r\nexport default function ButtonDetails({\r\n  acceptedFileTypes,\r\n  maxFileCount,\r\n  maxFileSize,\r\n  minFileCount,\r\n}: {\r\n  acceptedFileTypes: string;\r\n  maxFileCount: number;\r\n  maxFileSize: string;\r\n  minFileCount: number;\r\n}) {\r\n  return (\r\n    <ButtonDetailsComponent\r\n      acceptedFileTypes={acceptedFileTypes}\r\n      maxFileCount={maxFileCount}\r\n      maxFileSize={maxFileSize}\r\n      minFileCount={minFileCount}\r\n    />\r\n  );\r\n}\r\n",
      "type": "registry:component",
      "target": ""
    },
    {
      "path": "registry\\new-york\\common\\button-details\\button-details.tsx",
      "content": "/**\r\n * @description A component that displays the details of the upload button.\r\n * @param {string} acceptedFileTypes - The accepted file types.\r\n * @param {number} maxFileCount - The maximum number of files that can be uploaded.\r\n * @param {string} maxFileSize - The maximum file size that can be uploaded.\r\n */\r\nexport default function ButtonDetails({\r\n  acceptedFileTypes,\r\n  maxFileCount,\r\n  maxFileSize,\r\n  minFileCount,\r\n}: {\r\n  acceptedFileTypes: string;\r\n  maxFileCount: number;\r\n  maxFileSize: string;\r\n  minFileCount: number;\r\n}) {\r\n  // [1]. JSX\r\n  return (\r\n    <div className=\"flex gap-2 flex-wrap items-center justify-center text-sm\">\r\n      <span className=\"text-center\">Allowed type: {acceptedFileTypes}</span>\r\n      <span className=\"text-center\">\r\n        Atleast {minFileCount > 1 ? minFileCount : 1} file(s)\r\n      </span>\r\n      {maxFileCount > 0 && (\r\n        <span className=\"text-center\">Atmost {maxFileCount} file(s)</span>\r\n      )}\r\n      <span className=\"text-center\">Up to {maxFileSize} each</span>\r\n    </div>\r\n  );\r\n}\r\n",
      "type": "registry:component",
      "target": ""
    },
    {
      "path": "hooks\\use-media-query.tsx",
      "content": "import * as React from \"react\";\r\n\r\n/**\r\n * @description A hook that returns the value of a media query.\r\n * @param {string} query - The media query to check.\r\n * @returns {boolean} The value of the media query.\r\n */\r\nexport function useMediaQuery(query: string) {\r\n  const [value, setValue] = React.useState(false);\r\n\r\n  React.useEffect(() => {\r\n    function onChange(event: MediaQueryListEvent) {\r\n      setValue(event.matches);\r\n    }\r\n\r\n    const result = matchMedia(query);\r\n    result.addEventListener(\"change\", onChange);\r\n    setValue(result.matches);\r\n\r\n    return () => result.removeEventListener(\"change\", onChange);\r\n  }, [query]);\r\n\r\n  return value;\r\n}\r\n",
      "type": "registry:hook",
      "target": ""
    },
    {
      "path": "lib\\uploadthing.ts",
      "content": "import {\r\n  generateUploadButton,\r\n  generateUploadDropzone,\r\n  generateReactHelpers,\r\n} from \"@uploadthing/react\";\r\n\r\nimport { OurFileRouter } from \"@/app/api/uploadthing/core\";\r\n\r\nexport const UploadButton = generateUploadButton<OurFileRouter>();\r\nexport const UploadDropzone = generateUploadDropzone<OurFileRouter>();\r\nexport const { useUploadThing, uploadFiles } =\r\n  generateReactHelpers<OurFileRouter>();\r\n",
      "type": "registry:lib",
      "target": ""
    },
    {
      "path": "app\\api\\uploadthing\\core.ts",
      "content": "import { createUploadthing, type FileRouter } from \"uploadthing/next\";\r\nimport { UploadThingError } from \"uploadthing/server\";\r\nimport { Redis } from \"@upstash/redis\";\r\nimport { Ratelimit } from \"@upstash/ratelimit\";\r\n\r\nconst f = createUploadthing();\r\n\r\nconst redis = new Redis({\r\n  url: process.env.UPSTASH_REDIS_REST_URL,\r\n  token: process.env.UPSTASH_REDIS_REST_TOKEN,\r\n});\r\n\r\nconst rateLimit = new Ratelimit({\r\n  redis,\r\n  limiter: Ratelimit.slidingWindow(6, \"60s\"),\r\n});\r\n\r\nconst rateLimitMiddleware = async (req: Request) => {\r\n  const ip =\r\n    req.headers.get(\"x-real-ip\") ??\r\n    req.headers.get(\"x-forwarded-for\") ??\r\n    \"127.0.0.1\";\r\n\r\n  const { success } = await rateLimit.limit(ip);\r\n\r\n  if (!success) {\r\n    throw new UploadThingError(\"Rate limit exceeded\");\r\n  }\r\n\r\n  // Otherwise, return\r\n  return;\r\n};\r\n\r\n// FileRouter for your app, can contain multiple FileRoutes\r\nexport const ourFileRouter = {\r\n  // Define as many FileRoutes as you like, each with a unique routeSlug\r\n  imageUploader: f(\r\n    {\r\n      image: {\r\n        /**\r\n         * For full list of options and defaults, see the File Route API reference\r\n         * @see https://docs.uploadthing.com/file-routes#route-config\r\n         */\r\n        maxFileSize: \"8MB\",\r\n      },\r\n    },\r\n    // Await server data to be sent to the client inorder to mark the file as uploaded\r\n    { awaitServerData: true }\r\n  )\r\n    .middleware(async ({ req }) => {\r\n      await rateLimitMiddleware(req);\r\n\r\n      // Whatever is returned here is accessible in onUploadComplete as `metadata`\r\n      return {};\r\n    })\r\n    .onUploadComplete(async ({ metadata, file }) => {\r\n      console.log(\"file url\", file.ufsUrl);\r\n      console.log(\"metadata\", metadata);\r\n\r\n      // !!! Whatever is returned here is sent to the clientside `onClientUploadComplete` callback\r\n      return {};\r\n    }),\r\n} satisfies FileRouter;\r\n\r\nexport type OurFileRouter = typeof ourFileRouter;\r\n",
      "type": "registry:component",
      "target": ""
    },
    {
      "path": "lib\\uploadthingui-utils.ts",
      "content": "import { ExpandedRouteConfig, FileRouterInputKey } from \"@uploadthing/shared\";\r\n\r\nexport function getFileSizeFormatted(size: number) {\r\n  if (size < 1024) return `${size} B`;\r\n  if (size < 1024 * 1024) return `${(size / 1024).toFixed(0)} KB`;\r\n  if (size < 1024 * 1024 * 1024) return `${(size / 1024 / 1024).toFixed(1)} MB`;\r\n  return `${(size / 1024 / 1024 / 1024).toFixed(2)} GB`;\r\n}\r\n\r\n// Return the objects value\r\nexport function checkFileObjectKey({\r\n  str,\r\n  obj,\r\n}: {\r\n  str: FileRouterInputKey | undefined;\r\n  obj: ExpandedRouteConfig | undefined;\r\n}) {\r\n  if (!str || !obj) return null;\r\n\r\n  if (obj && typeof obj === \"object\" && obj.hasOwnProperty(str)) {\r\n    return obj[str];\r\n  } else {\r\n    return null;\r\n  }\r\n}\r\n\r\n/**\r\n * @description A utility function that truncates the file name to a maximum number of characters.\r\n * @param {string} fileName - The file name to truncate.\r\n * @param {number} maxChars - The maximum number of characters to truncate the file name to. Default is 24.\r\n * @returns {string} The truncated file name.\r\n */\r\nexport function truncateFileName(fileName: string, maxChars?: number) {\r\n  if (fileName.length > 20) {\r\n    return `${fileName.slice(0, maxChars ?? 24)}...`;\r\n  }\r\n  return fileName;\r\n}\r\n",
      "type": "registry:lib",
      "target": ""
    },
    {
      "path": "stores\\main.ts",
      "content": "import { toast } from \"sonner\";\r\nimport { create } from \"zustand\";\r\n\r\nexport type UTUIFile = {\r\n  file: File;\r\n  id: string;\r\n  status: \"uploading\" | \"uploaded\" | \"not started\" | \"error\";\r\n  error?: string;\r\n  createdAt: Date;\r\n};\r\n\r\ntype additionalDetails = {\r\n  maxFileCount?: number;\r\n  minFileCount?: number;\r\n};\r\n\r\ninterface FileStorageState {\r\n  instances: Record<string, UTUIFile[]>;\r\n  addFiles: (\r\n    instanceId: string,\r\n    files: UTUIFile[],\r\n    additionalDetails: additionalDetails\r\n  ) => void;\r\n  removeFiles: (instanceId: string, fileId: string) => void;\r\n  updateFile: (instanceId: string, file: UTUIFile) => void;\r\n  getFiles: (instanceId: string) => UTUIFile[];\r\n}\r\n\r\nconst defaultFileStorageState = {\r\n  instances: {},\r\n};\r\n\r\nexport const useFileStorageStore = create<FileStorageState>()((set, get) => ({\r\n  ...defaultFileStorageState,\r\n  // Takes an array of files and add them to the state for a specific instance\r\n  addFiles: (\r\n    instanceId: string,\r\n    files: UTUIFile[],\r\n    additionalDetails: additionalDetails\r\n  ) => {\r\n    if (\r\n      additionalDetails.maxFileCount &&\r\n      get().getFiles(instanceId).length + files.length >\r\n        additionalDetails.maxFileCount\r\n    ) {\r\n      toast.error(`Failed to upload!`, {\r\n        description: `Max file count of ${additionalDetails.maxFileCount} exceeded.`,\r\n        action: {\r\n          label: `Close`,\r\n          onClick: () => toast.dismiss(),\r\n        },\r\n      });\r\n      return;\r\n    }\r\n\r\n    if (\r\n      additionalDetails.minFileCount &&\r\n      get().getFiles(instanceId).length + files.length <\r\n        additionalDetails.minFileCount\r\n    ) {\r\n      toast.error(`Failed to upload!`, {\r\n        description: `Required to upload at least ${additionalDetails.minFileCount} files.`,\r\n        action: {\r\n          label: `Close`,\r\n          onClick: () => toast.dismiss(),\r\n        },\r\n      });\r\n      return;\r\n    }\r\n    return set((state) => ({\r\n      instances: {\r\n        ...state.instances,\r\n        [instanceId]: [...(state.instances[instanceId] || []), ...files],\r\n      },\r\n    }));\r\n  },\r\n  // Takes an array of files and remove them from the state for a specific instance\r\n  removeFiles: (instanceId: string, fileId: string) => {\r\n    return set((state) => ({\r\n      instances: {\r\n        ...state.instances,\r\n        [instanceId]: (state.instances[instanceId] || []).filter(\r\n          (file) => file.id !== fileId\r\n        ),\r\n      },\r\n    }));\r\n  },\r\n  updateFile: (instanceId: string, file: UTUIFile) =>\r\n    set((state) => ({\r\n      instances: {\r\n        ...state.instances,\r\n        [instanceId]: (state.instances[instanceId] || []).map((f) =>\r\n          f.id === file.id ? file : f\r\n        ),\r\n      },\r\n    })),\r\n  getFiles: (instanceId: string) => get().instances[instanceId] || [],\r\n}));\r\n",
      "type": "registry:component",
      "target": ""
    }
  ]
}