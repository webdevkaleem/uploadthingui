{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "toast-button",
  "type": "registry:component",
  "title": "Toast Button",
  "description": "An upload button component which uses toasts as its response method",
  "dependencies": [
    "lucide-react@^0.435.0",
    "@paralleldrive/cuid2@^2.2.2",
    "uploadthing@^7.7.2",
    "@uploadthing/react@^7.3.1",
    "@uploadthing/shared@^7.1.8",
    "@radix-ui/react-slot",
    "class-variance-authority",
    "@uploadthing/react",
    ".",
    "@uploadthing/shared",
    "sonner",
    "zustand",
    "@paralleldrive/cuid2",
    "lucide-react",
    "uploadthing"
  ],
  "registryDependencies": [
    "sonner",
    "button"
  ],
  "files": [
    {
      "path": "registry/new-york/toast-button/toast-button.tsx",
      "content": "\"use client\";\n\nimport { Button } from \"@/components/ui/button\";\nimport { UploadButton, useUploadThing } from \"@/lib/uploadthing\";\nimport {\n  checkFileObjectKey,\n  getFileSizeFormatted,\n  truncateFileName,\n} from \"@/lib/uploadthingui-utils\";\nimport { useFileStorageStore, type UTUIFile } from \"@/stores/main\";\nimport { createId } from \"@paralleldrive/cuid2\";\nimport { Upload } from \"lucide-react\";\nimport { useEffect, useRef, type ComponentProps } from \"react\";\nimport { toast } from \"sonner\";\nimport { generatePermittedFileTypes } from \"uploadthing/client\";\n\n// Get the props type directly from UploadButton\ntype UploadButtonProps = ComponentProps<typeof UploadButton>;\n\n/**\n * @description An upload button component which uses toasts as its response method.\n * @param {UploadButtonProps} props - The props for the UploadButton component.\n * @param {boolean} showDetails - Whether to show the details of the upload.\n * @param {string} instanceId - The instance ID for the upload. Required to avoid multiple instances of the same component if multiple upload buttons are used.\n * @param {boolean} allowInBetweenUploads - Whether to allow in between uploads.\n * @param {routeDetails} routeDetails - Additional details for the upload; Example: maxFileCount, minFileCount, etc.\n * @param {React.ReactNode} children - React node to render a custom button component.\n */\nexport default function ToastButton({\n  props,\n  showDetails = false,\n  instanceId,\n  allowInBetweenUploads = true,\n  routeDetails,\n  children,\n}: {\n  props: UploadButtonProps;\n  showDetails?: boolean;\n  instanceId: string;\n  routeDetails?: {\n    maxFileCount?: number;\n    minFileCount?: number;\n  };\n  allowInBetweenUploads?: boolean;\n  children?: React.ReactNode;\n}) {\n  // [1]. States, Refs, Hooks, etc.\n  const { endpoint, ...restProps } = props;\n\n  // Used to reference the file input element\n  const fileInputRef = useRef<HTMLInputElement>(null);\n\n  const { getFiles, addFiles } = useFileStorageStore();\n\n  // Used to get the route config from uploadthing\n  const { routeConfig } = useUploadThing(endpoint, {\n    ...restProps,\n  });\n\n  const files = getFiles(instanceId);\n\n  const canUpload =\n    allowInBetweenUploads ||\n    files.filter((file) => file.status === \"uploading\").length === 0;\n\n  // Used to generate the accepted file types\n  const acceptedFileTypes = generatePermittedFileTypes(routeConfig)\n    .fileTypes.map((fileType) => {\n      if (fileType.includes(\"/\")) {\n        return fileType;\n      } else {\n        return `${fileType}/*`;\n      }\n    })\n    .join(\",\");\n\n  // Used to check the file route options\n  const fileRouteOptions = checkFileObjectKey({\n    str: generatePermittedFileTypes(routeConfig).fileTypes[0],\n    obj: routeConfig,\n  });\n\n  // If the file route options are not found then return\n  if (!fileRouteOptions) return;\n\n  // [2]. Handlers\n  // Used to open the file input prompt\n  const handleFileButtonClick = () => {\n    fileInputRef.current?.click();\n  };\n\n  // Used to handle the file change event\n  const handleFileChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    const selectedFiles = e.target.files;\n\n    // If no files are selected then return\n    if (!selectedFiles || selectedFiles.length === 0) return;\n\n    if (!canUpload) return;\n\n    // At this moment, the files are not uploaded, so we set the status to \"not started\"\n    addFiles(\n      instanceId,\n      Array.from(selectedFiles).map((fileObj) => ({\n        id: createId(),\n        file: fileObj,\n        status: \"not started\",\n        createdAt: new Date(),\n      })),\n      routeDetails ?? {}\n    );\n\n    // Reset the input to allow selection of the same files again\n    if (fileInputRef.current) {\n      fileInputRef.current.value = \"\";\n    }\n  };\n\n  // [3]. JSX\n  return (\n    <>\n      {/* Hidden input to allow selection of files */}\n      <input\n        ref={fileInputRef}\n        type=\"file\"\n        className=\"hidden\"\n        multiple={\n          routeDetails?.maxFileCount === undefined ||\n          routeDetails.maxFileCount > 1\n        }\n        accept={acceptedFileTypes}\n        onChange={handleFileChange}\n      />\n      <div className=\"flex flex-col items-center gap-4\">\n        <ActionButton\n          children={children}\n          handleFileButtonClick={handleFileButtonClick}\n          disabled={!canUpload}\n        />\n        {showDetails && (\n          <ButtonDetails\n            acceptedFileTypes={acceptedFileTypes}\n            maxFileCount={routeDetails?.maxFileCount ?? 0}\n            minFileCount={routeDetails?.minFileCount ?? 0}\n            maxFileSize={fileRouteOptions.maxFileSize}\n          />\n        )}\n      </div>\n      {/* Uploading toasts */}\n      {files.map((file) => (\n        <UploadingToast\n          key={file.id}\n          file={file}\n          props={props}\n          instanceId={instanceId}\n        />\n      ))}\n    </>\n  );\n}\n\n/**\n * @description A component that displays the uploading toast.\n * @param {UTUIFile} file - The file to upload.\n * @param {UploadButtonProps} props - The props for the UploadButton component.\n * @param {string} instanceId - The instance ID for the upload. Required to avoid multiple instances of the same component if multiple upload buttons are used.\n */\nfunction UploadingToast({\n  file,\n  props,\n  instanceId,\n}: {\n  file: UTUIFile;\n  props: UploadButtonProps;\n  instanceId: string;\n}) {\n  // [1]. States, Refs, Hooks, etc.\n  const { endpoint, ...restProps } = props;\n\n  const fileUploadRef = useRef(false);\n\n  // Used to create an abort controller\n  const abortControllerRef = useRef<AbortController | null>(\n    new AbortController()\n  );\n\n  const { removeFiles, updateFile, getFiles } = useFileStorageStore();\n\n  // Used to start the upload\n  const { startUpload } = useUploadThing(endpoint, {\n    ...restProps,\n    // Set the upload progress granularity to \"fine\" if not provided\n    uploadProgressGranularity: restProps.uploadProgressGranularity ?? \"fine\",\n    signal: abortControllerRef.current?.signal,\n    onUploadError: (error) => {\n      // Run the onUploadError prop if provided\n      restProps.onUploadError?.(error);\n\n      // Update the file status to \"error\" and set the error message\n      updateFile(instanceId, {\n        ...file,\n        status: \"error\",\n        error: error.message,\n      });\n\n      // Throw the error to be caught by the toast\n      throw new Error(error.message);\n    },\n    onBeforeUploadBegin: (files) => {\n      // Run the onUploadBegin prop if provided\n      restProps?.onUploadBegin?.(file.file.name);\n\n      // Update the file status to \"uploading\"\n      updateFile(instanceId, { ...file, status: \"uploading\" });\n\n      return files;\n    },\n    onClientUploadComplete: (res) => {\n      // Run the onClientUploadComplete prop if provided\n      restProps?.onClientUploadComplete?.(res);\n\n      // Update the file status to \"uploaded\"\n      updateFile(instanceId, { ...file, status: \"uploaded\" });\n    },\n  });\n\n  // [2]. Effects\n  // This effect will only then start the upload to avoid rerendering / reuploading the same files\n  useEffect(() => {\n    if (!fileUploadRef.current && file.status === \"not started\") {\n      // Set the file upload ref to true to avoid reuploading the same file\n      fileUploadRef.current = true;\n\n      // Start the upload\n      const fileUploadPromise = startUpload([file.file]);\n\n      // Render the toast\n      toast.promise(fileUploadPromise, {\n        loading: (\n          <div className=\"flex flex-col\">\n            <p>Uploading...</p>\n            <p>\n              {truncateFileName(file.file.name)} (\n              {getFileSizeFormatted(file.file.size)})\n            </p>\n          </div>\n        ),\n        success: () => {\n          // Remove the file from the state to avoid reuploading the same file\n          removeFiles(instanceId, file.id);\n\n          return {\n            message: `Uploaded successfully!`,\n            description: `${truncateFileName(\n              file.file.name\n            )} - (${getFileSizeFormatted(file.file.size)})`,\n          };\n        },\n        error: () => {\n          const currentFile = getFiles(instanceId).find(\n            (f) => f.id === file.id\n          );\n\n          // Remove the file from the state to avoid reuploading the same file\n          removeFiles(instanceId, file.id);\n\n          return {\n            message: `${currentFile?.error\n              ? truncateFileName(currentFile.error, 32)\n              : \"Failed to upload!\"\n              }`,\n            description: `${truncateFileName(\n              file.file.name\n            )} - (${getFileSizeFormatted(file.file.size)})`,\n          };\n        },\n        action: {\n          label: `Close`,\n          onClick: () => {\n            // Remove the file and abort the upload\n            abortControllerRef.current?.abort();\n            removeFiles(instanceId, file.id);\n          },\n        },\n      });\n    }\n  }, [file]);\n\n  // Returning null because the toast is rendered by the useUploadThing hook\n  return null;\n}\n\n/**\n * @description A conditional button component that will render a custom button component if provided, otherwise it will render a default button component.\n * @param {function} handleFileButtonClick - Function to handle the file button click event.\n * @param {boolean} disabled - Whether to disable the button.\n * @param {React.ReactNode} children - React node to render a custom button component.\n */\nfunction ActionButton({\n  handleFileButtonClick,\n  disabled,\n  children,\n}: {\n  handleFileButtonClick: () => void;\n  disabled?: boolean;\n  children: React.ReactNode;\n}) {\n  // If a custom button has returned then render that and attach the onClick handler to it\n  if (children) {\n    return <div onClick={handleFileButtonClick}>{children}</div>;\n  }\n\n  // Otherwise render the default button component\n  return (\n    <Button\n      className=\"w-fit\"\n      onClick={handleFileButtonClick}\n      disabled={disabled}\n    >\n      <Upload className=\"w-4 h-4\" />\n      <span className=\"ml-2\">Upload</span>\n    </Button>\n  );\n}\n\n/**\n * @description A component that displays the details of the upload button.\n * @param {string} acceptedFileTypes - The accepted file types.\n * @param {number} maxFileCount - The maximum number of files that can be uploaded.\n * @param {string} maxFileSize - The maximum file size that can be uploaded.\n */\nfunction ButtonDetails({\n  acceptedFileTypes,\n  maxFileCount,\n  maxFileSize,\n  minFileCount,\n}: {\n  acceptedFileTypes: string;\n  maxFileCount: number;\n  maxFileSize: string;\n  minFileCount: number;\n}) {\n  // [1]. JSX\n  return (\n    <div className=\"flex gap-2 flex-wrap items-center justify-center text-sm\">\n      <span className=\"text-center\">Allowed type: {acceptedFileTypes}</span>\n      <span className=\"text-center\">\n        Atleast {minFileCount > 1 ? minFileCount : 1} file(s)\n      </span>\n      {maxFileCount > 0 && (\n        <span className=\"text-center\">Atmost {maxFileCount} file(s)</span>\n      )}\n      <span className=\"text-center\">Up to {maxFileSize} each</span>\n    </div>\n  );\n}\n",
      "type": "registry:component",
      "target": "components/uploadthingui/toast-button.tsx"
    },
    {
      "path": "stores/main.ts",
      "content": "import { toast } from \"sonner\";\nimport { create } from \"zustand\";\n\nexport type UTUIFile = {\n  file: File;\n  id: string;\n  status: \"uploading\" | \"uploaded\" | \"not started\" | \"error\";\n  error?: string;\n  createdAt: Date;\n};\n\ntype additionalDetails = {\n  maxFileCount?: number;\n  minFileCount?: number;\n};\n\ninterface FileStorageState {\n  instances: Record<string, UTUIFile[]>;\n  addFiles: (\n    instanceId: string,\n    files: UTUIFile[],\n    additionalDetails: additionalDetails\n  ) => void;\n  removeFiles: (instanceId: string, fileId: string) => void;\n  updateFile: (instanceId: string, file: UTUIFile) => void;\n  getFiles: (instanceId: string) => UTUIFile[];\n}\n\nconst defaultFileStorageState = {\n  instances: {},\n};\n\nexport const useFileStorageStore = create<FileStorageState>()((set, get) => ({\n  ...defaultFileStorageState,\n  // Takes an array of files and add them to the state for a specific instance\n  addFiles: (\n    instanceId: string,\n    files: UTUIFile[],\n    additionalDetails: additionalDetails\n  ) => {\n    if (\n      additionalDetails.maxFileCount &&\n      get().getFiles(instanceId).length + files.length >\n        additionalDetails.maxFileCount\n    ) {\n      toast.error(`Failed to upload!`, {\n        description: `Max file count of ${additionalDetails.maxFileCount} exceeded.`,\n        action: {\n          label: `Close`,\n          onClick: () => toast.dismiss(),\n        },\n      });\n      return;\n    }\n\n    if (\n      additionalDetails.minFileCount &&\n      get().getFiles(instanceId).length + files.length <\n        additionalDetails.minFileCount\n    ) {\n      toast.error(`Failed to upload!`, {\n        description: `Required to upload at least ${additionalDetails.minFileCount} files.`,\n        action: {\n          label: `Close`,\n          onClick: () => toast.dismiss(),\n        },\n      });\n      return;\n    }\n    return set((state) => ({\n      instances: {\n        ...state.instances,\n        [instanceId]: [...(state.instances[instanceId] || []), ...files],\n      },\n    }));\n  },\n  // Takes an array of files and remove them from the state for a specific instance\n  removeFiles: (instanceId: string, fileId: string) => {\n    return set((state) => ({\n      instances: {\n        ...state.instances,\n        [instanceId]: (state.instances[instanceId] || []).filter(\n          (file) => file.id !== fileId\n        ),\n      },\n    }));\n  },\n  updateFile: (instanceId: string, file: UTUIFile) =>\n    set((state) => ({\n      instances: {\n        ...state.instances,\n        [instanceId]: (state.instances[instanceId] || []).map((f) =>\n          f.id === file.id ? file : f\n        ),\n      },\n    })),\n  getFiles: (instanceId: string) => get().instances[instanceId] || [],\n}));\n",
      "type": "registry:file",
      "target": "stores/main.ts"
    },
    {
      "path": "lib/uploadthingui-utils.ts",
      "content": "import { type ExpandedRouteConfig, type FileRouterInputKey } from \"@uploadthing/shared\";\n\nexport function getFileSizeFormatted(size: number) {\n  if (size < 1024) return `${size} B`;\n  if (size < 1024 * 1024) return `${(size / 1024).toFixed(0)} KB`;\n  if (size < 1024 * 1024 * 1024) return `${(size / 1024 / 1024).toFixed(1)} MB`;\n  return `${(size / 1024 / 1024 / 1024).toFixed(2)} GB`;\n}\n\n// Return the objects value\nexport function checkFileObjectKey({\n  str,\n  obj,\n}: {\n  str: FileRouterInputKey | undefined;\n  obj: ExpandedRouteConfig | undefined;\n}) {\n  if (!str || !obj) return null;\n\n  if (obj && typeof obj === \"object\" && obj.hasOwnProperty(str)) {\n    return obj[str];\n  } else {\n    return null;\n  }\n}\n\n/**\n * @description A utility function that truncates the file name to a maximum number of characters.\n * @param {string} fileName - The file name to truncate.\n * @param {number} maxChars - The maximum number of characters to truncate the file name to. Default is 24.\n * @returns {string} The truncated file name.\n */\nexport function truncateFileName(fileName: string, maxChars?: number) {\n  if (fileName.length > 20) {\n    return `${fileName.slice(0, maxChars ?? 24)}...`;\n  }\n  return fileName;\n}\n",
      "type": "registry:lib"
    },
    {
      "path": "lib/uploadthing.ts",
      "content": "import {\n  generateUploadButton,\n  generateUploadDropzone,\n  generateReactHelpers,\n} from \"@uploadthing/react\";\nimport { type OurFileRouter } from \"./uploadthingui-types\";\n\nexport const UploadButton = generateUploadButton<OurFileRouter>();\nexport const UploadDropzone = generateUploadDropzone<OurFileRouter>();\nexport const { useUploadThing, uploadFiles } = generateReactHelpers<OurFileRouter>();\n\n// Export a type that users can extend if needed\nexport type FileRouter = OurFileRouter;",
      "type": "registry:lib"
    },
    {
      "path": "lib/uploadthingui-types.ts",
      "content": "import { type FileRouter } from \"uploadthing/next\";\n\n// Export a basic FileRouter type that users can extend\nexport type OurFileRouter = FileRouter;",
      "type": "registry:lib"
    },
    {
      "path": "components/ui/button.tsx",
      "content": "import * as React from \"react\";\nimport { Slot } from \"@radix-ui/react-slot\";\nimport { cva, type VariantProps } from \"class-variance-authority\";\n\nimport { cn } from \"@/lib/utils\";\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-primary text-primary-foreground hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-destructive-foreground hover:bg-destructive/90\",\n        outline:\n          \"border border-input bg-background hover:bg-accent hover:text-accent-foreground\",\n        secondary:\n          \"bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-10 px-4 py-2\",\n        sm: \"h-9 rounded-md px-3\",\n        lg: \"h-11 rounded-md px-8\",\n        icon: \"h-9 w-9\",\n        xs: \"h-7 rounded-md px-2\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n);\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean;\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\";\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    );\n  }\n);\nButton.displayName = \"Button\";\n\nexport { Button, buttonVariants };\n",
      "type": "registry:ui",
      "target": ""
    }
  ]
}